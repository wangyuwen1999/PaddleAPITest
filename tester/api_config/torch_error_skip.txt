paddle.kthvalue(Tensor([4294967295],"float32"), 1, )
paddle.kthvalue(Tensor([4294967295],"float32"), k=2, )
paddle.nn.functional.log_softmax(Tensor([1, 4294967297],"float16"), )
paddle.cumsum(Tensor([10, 429496730],"float16"), dtype="float16", )
paddle.cumsum(Tensor([357913942, 12],"float16"), dtype="float16", )
paddle.cumsum(Tensor([4, 1073741825],"float16"), axis=1, )
paddle.cumsum(x=Tensor([1, 16, 8388609, 32],"float16"), axis=2, )
paddle.cumsum(x=Tensor([4294967297],"float16"), )
paddle.cumsum(x=Tensor([715827883, 2, 1, 3],"float16"), axis=-4, )
paddle.cumsum(x=Tensor([715827883, 2, 1, 3],"float16"), axis=Tensor([1],"float16"), )
paddle.cumsum(x=Tensor([87382, 16, 96, 32],"float16"), axis=2, )
paddle.logcumsumexp(Tensor([10, 429496730],"float16"), dtype="float16", axis=1, )
paddle.logcumsumexp(Tensor([10, 429496730],"float16"), dtype="float16", axis=None, )
paddle.logcumsumexp(Tensor([357913942, 12],"float16"), dtype="float16", axis=None, )
paddle.logcumsumexp(Tensor([1073741824, 4],"float32"), )
paddle.logcumsumexp(Tensor([1073741824, 4],"float32"), dtype="float32", )
paddle.cumulative_trapezoid(y=Tensor([2, 1140850690],"float32"), x=None, dx=None, axis=-1, )
paddle.cumulative_trapezoid(y=Tensor([2, 2147483649],"float16"), x=None, dx=None, axis=-1, )
paddle.nn.functional.group_norm(Tensor([357913942, 4, 3],"float16"), num_groups=2, weight=Tensor([4],"float16"), bias=Tensor([4],"float16"), data_format="NCL", )
paddle.nn.functional.group_norm(Tensor([357913942, 3, 4],"float16"), num_groups=2, weight=Tensor([4],"float16"), bias=Tensor([4],"float16"), data_format="NLC", )
paddle.nn.functional.group_norm(Tensor([2, 536870913, 4],"float16"), num_groups=2, weight=Tensor([4],"float16"), bias=Tensor([4],"float16"), data_format="NLC", )
paddle.nn.functional.group_norm(Tensor([2, 3, 89478486, 2, 4],"float16"), num_groups=2, weight=Tensor([4],"float16"), bias=Tensor([4],"float16"), data_format="NDHWC", )
paddle.nn.functional.group_norm(Tensor([2, 3, 2, 89478486, 4],"float16"), num_groups=2, weight=Tensor([4],"float16"), bias=Tensor([4],"float16"), data_format="NDHWC", )
paddle.nn.functional.group_norm(Tensor([2, 268435457, 2, 4],"float16"), num_groups=2, weight=Tensor([4],"float16"), bias=Tensor([4],"float16"), data_format="NHWC", )
paddle.nn.functional.group_norm(Tensor([2, 134217729, 2, 2, 4],"float16"), num_groups=2, weight=Tensor([4],"float16"), bias=Tensor([4],"float16"), data_format="NDHWC", )
paddle.matmul(x=Tensor([4, 1073741825],"float16"), y=Tensor([1073741825],"float16"), transpose_x=False, transpose_y=True, )
paddle.matmul(Tensor([1431655766],"float16"), Tensor([3, 1431655766],"float16"), False, True, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([178956971, 3, 8],"float16"), 2, None, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([2, 142606337, 8],"float32"), 2, None, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([2, 268435457, 8],"float16"), 2, None, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([2, 3, 715827883],"float16"), 2, None, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([2, 35651585, 32],"float32"), 16, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([2, 35651585, 32],"float32"), 16, None, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([2, 35651585, 32],"float32"), output_size=16, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([2, 67108864, 32],"float32"), 16, None, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([2, 67108864, 32],"float32"), output_size=16, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([23767723, 3, 32],"float32"), 16, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([23767723, 3, 32],"float32"), 16, None, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([23767723, 3, 32],"float32"), output_size=16, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([95070891, 3, 8],"float32"), 2, None, )
paddle.nn.functional.adaptive_avg_pool1d(x=Tensor([178956971, 3, 8],"float16"), output_size=2, )
paddle.nn.functional.adaptive_avg_pool1d(x=Tensor([2, 142606337, 8],"float32"), output_size=2, )
paddle.nn.functional.adaptive_avg_pool1d(x=Tensor([2, 268435457, 8],"float16"), output_size=2, )
paddle.nn.functional.adaptive_avg_pool1d(x=Tensor([2, 3, 715827883],"float16"), output_size=2, )
paddle.nn.functional.adaptive_avg_pool1d(x=Tensor([95070891, 3, 8],"float32"), output_size=2, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 128, 1048576, 32],"float32"), output_size=tuple(2,2,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 128, 1048576, 32],"float32"), output_size=tuple(3,3,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 128, 1048576, 32],"float32"), output_size=tuple(6,6,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 128, 32, 1048576],"float32"), output_size=tuple(2,2,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 128, 32, 1048576],"float32"), output_size=tuple(3,3,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 128, 32, 1048576],"float32"), output_size=tuple(6,6,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 128, 32, 557057],"float32"), output_size=tuple(2,2,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 128, 32, 557057],"float32"), output_size=tuple(3,3,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 128, 32, 557057],"float32"), output_size=tuple(6,6,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 128, 557057, 32],"float32"), output_size=tuple(2,2,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 128, 557057, 32],"float32"), output_size=tuple(3,3,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 128, 557057, 32],"float32"), output_size=tuple(6,6,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 139265, 128, 128],"float32"), output_size=tuple(2,2,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 139265, 128, 128],"float32"), output_size=tuple(3,3,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 139265, 128, 128],"float32"), output_size=tuple(6,6,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 160, 16, 1677722],"float32"), output_size=2, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 160, 16, 1677722],"float32"), output_size=4, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 160, 16, 891290],"float32"), output_size=2, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 160, 16, 891290],"float32"), output_size=4, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 160, 445645, 32],"float32"), output_size=4, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 160, 838861, 32],"float32"), output_size=2, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 160, 838861, 32],"float32"), output_size=4, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 2228225, 32, 32],"float32"), output_size=tuple(2,2,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 2228225, 32, 32],"float32"), output_size=tuple(3,3,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 2228225, 32, 32],"float32"), output_size=tuple(6,6,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 262144, 128, 128],"float32"), output_size=tuple(2,2,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 262144, 128, 128],"float32"), output_size=tuple(3,3,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 262144, 128, 128],"float32"), output_size=tuple(6,6,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 4194304, 32, 32],"float32"), output_size=tuple(2,2,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 4194304, 32, 32],"float32"), output_size=tuple(3,3,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 4194304, 32, 32],"float32"), output_size=tuple(6,6,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 4456449, 16, 32],"float32"), output_size=2, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 4456449, 16, 32],"float32"), output_size=4, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 512, 128, 34817],"float32"), output_size=tuple(2,2,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 512, 128, 34817],"float32"), output_size=tuple(3,3,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 512, 128, 34817],"float32"), output_size=tuple(6,6,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 512, 128, 65536],"float32"), output_size=tuple(2,2,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 512, 128, 65536],"float32"), output_size=tuple(3,3,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 512, 128, 65536],"float32"), output_size=tuple(6,6,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 512, 2, 4194304],"float32"), output_size=tuple(7,7,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 512, 34817, 128],"float32"), output_size=tuple(2,2,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 512, 34817, 128],"float32"), output_size=tuple(3,3,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 512, 34817, 128],"float32"), output_size=tuple(6,6,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 512, 4194304, 2],"float32"), output_size=tuple(7,7,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 512, 65536, 128],"float32"), output_size=tuple(2,2,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 512, 65536, 128],"float32"), output_size=tuple(3,3,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 512, 65536, 128],"float32"), output_size=tuple(6,6,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 8388608, 16, 32],"float32"), output_size=2, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 8388608, 16, 32],"float32"), output_size=4, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([11369, 64, 56, 56],"float32"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 1024, 218, 80],"float32"), list[1,40,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 1024, 4, 4353],"float32"), list[1,40,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 1024, 4, 8192],"float16"), list[1,40,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 1024, 4, 8192],"float32"), list[1,40,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 1024, 410, 80],"float16"), list[1,40,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 1024, 410, 80],"float32"), list[1,40,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 104858, 4, 80],"float16"), list[1,40,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 104858, 4, 80],"float32"), list[1,40,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 128, 28, 4974],"float32"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 128, 28, 9363],"float16"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 128, 28, 9363],"float32"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 128, 4974, 28],"float32"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 128, 9363, 28],"float16"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 128, 9363, 28],"float32"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 171197, 14, 14],"float16"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 171197, 14, 14],"float32"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 22737, 28, 28],"float32"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 320, 14, 3979],"float32"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 320, 14, 7490],"float16"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 320, 14, 7490],"float32"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 320, 3979, 14],"float32"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 320, 7490, 14],"float16"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 320, 7490, 14],"float32"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 42800, 28, 28],"float16"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 42800, 28, 28],"float32"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 512, 4974, 7],"float32"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 512, 7, 4974],"float32"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 512, 7, 9363],"float16"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 512, 9363, 7],"float16"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 55706, 4, 80],"float32"), list[1,40,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 5685, 56, 56],"float32"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 64, 4974, 56],"float32"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 64, 56, 4974],"float32"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([13, 105352, 56, 56],"float32"), output_size=list[7,7,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([13, 256, 12243, 56],"float32"), output_size=list[7,7,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([13, 256, 23046, 56],"float32"), output_size=list[7,7,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([13, 256, 56, 12243],"float32"), output_size=list[7,7,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([13, 256, 56, 23046],"float32"), output_size=list[7,7,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([13, 55968, 56, 56],"float32"), output_size=list[7,7,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([13108, 1024, 4, 80],"float16"), list[1,40,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([13108, 1024, 4, 80],"float32"), list[1,40,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([14855, 480, 4, 80],"float32"), list[1,40,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([15521779, 3, 7, 7],"float32"), output_size=list[3,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([15521779, 3, 7, 7],"float32"), output_size=list[None,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([17409, 128, 32, 32],"float32"), output_size=tuple(2,2,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([17409, 128, 32, 32],"float32"), output_size=tuple(3,3,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([17409, 128, 32, 32],"float32"), output_size=tuple(6,6,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([178258, 256, 2, 25],"float32"), output_size=list[1,25,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([192, 480, 4, 11651],"float16"), list[1,40,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([192, 480, 583, 80],"float16"), list[1,40,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([192, 69906, 4, 80],"float16"), list[1,40,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 134217729, 4, 4],"float16"), output_size=list[1,4,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 134217729, 4, 4],"float16"), output_size=list[2,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 23282668, 7, 7],"float32"), output_size=list[3,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 23282668, 7, 7],"float32"), output_size=list[None,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 102261127, 7],"float32"), list[2,5,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 102261127, 7],"float32"), output_size=5, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 102261127, 7],"float32"), output_size=list[2,5,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 102261127, 7],"float32"), output_size=list[3,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 178956971, 4],"float16"), output_size=list[1,4,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 178956971, 4],"float16"), output_size=list[2,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 178956971, 4],"float16"), output_size=list[3,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 178956971, 4],"float32"), output_size=list[3,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 4, 178956971],"float16"), output_size=list[1,4,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 4, 178956971],"float16"), output_size=list[2,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 4, 178956971],"float16"), output_size=list[3,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 4, 178956971],"float32"), output_size=list[3,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 7, 102261127],"float32"), list[2,5,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 7, 102261127],"float32"), output_size=5, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 7, 102261127],"float32"), output_size=list[2,5,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 7, 102261127],"float32"), output_size=list[3,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 7, 102261127],"float32"), output_size=list[None,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 43826197, 7, 7],"float32"), list[2,5,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 43826197, 7, 7],"float32"), output_size=list[2,5,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 43826197, 7, 7],"float32"), output_size=list[3,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 43826197, 7, 7],"float32"), output_size=list[None,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 512, 318318, 7],"float32"), output_size=tuple(7,7,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 512, 599187, 7],"float32"), output_size=tuple(7,7,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 512, 7, 318318],"float32"), output_size=tuple(7,7,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 512, 7, 599187],"float32"), output_size=tuple(7,7,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 67108865, 4, 4],"float64"), output_size=list[1,4,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 67108865, 4, 4],"float64"), output_size=list[2,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 67108865, 4, 4],"float64"), output_size=list[3,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 71303169, 4, 4],"float32"), output_size=list[3,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([22737, 128, 28, 28],"float32"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([273, 512, 128, 128],"float32"), output_size=tuple(2,2,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([273, 512, 128, 128],"float32"), output_size=tuple(3,3,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([273, 512, 128, 128],"float32"), output_size=tuple(6,6,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([27853, 160, 16, 32],"float32"), output_size=2, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([27853, 160, 16, 32],"float32"), output_size=4, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([27963, 480, 4, 80],"float16"), list[1,40,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([27963, 480, 4, 80],"float32"), list[1,40,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2843, 256, 56, 56],"float32"), output_size=list[7,7,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([29217465, 3, 7, 7],"float32"), list[2,5,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([29217465, 3, 7, 7],"float32"), output_size=list[2,5,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([29217465, 3, 7, 7],"float32"), output_size=list[3,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([29217465, 3, 7, 7],"float32"), output_size=list[None,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([32768, 128, 32, 32],"float16"), output_size=tuple(2,2,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([32768, 128, 32, 32],"float16"), output_size=tuple(3,3,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([32768, 128, 32, 32],"float16"), output_size=tuple(6,6,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([32768, 128, 32, 32],"float32"), output_size=tuple(2,2,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([32768, 128, 32, 32],"float32"), output_size=tuple(3,3,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([32768, 128, 32, 32],"float32"), output_size=tuple(6,6,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([36380, 320, 14, 14],"float32"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 1024, 13108, 80],"float32"), list[1,40,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 1024, 4, 139265],"float32"), list[1,40,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 1024, 4, 262144],"float32"), list[1,40,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 1048576, 32, 32],"float16"), output_size=tuple(2,2,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 1048576, 32, 32],"float16"), output_size=tuple(3,3,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 1048576, 32, 32],"float16"), output_size=tuple(6,6,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 1048576, 32, 32],"float32"), output_size=tuple(2,2,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 1048576, 32, 32],"float32"), output_size=tuple(3,3,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 1048576, 32, 32],"float32"), output_size=tuple(6,6,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 1114113, 16, 32],"float32"), output_size=2, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 1114113, 16, 32],"float32"), output_size=4, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 128, 139265, 32],"float32"), output_size=tuple(2,2,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 128, 139265, 32],"float32"), output_size=tuple(3,3,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 128, 139265, 32],"float32"), output_size=tuple(6,6,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 128, 262144, 32],"float16"), output_size=tuple(2,2,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 128, 262144, 32],"float16"), output_size=tuple(3,3,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 128, 262144, 32],"float16"), output_size=tuple(6,6,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 128, 262144, 32],"float32"), output_size=tuple(2,2,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 128, 262144, 32],"float32"), output_size=tuple(3,3,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 128, 262144, 32],"float32"), output_size=tuple(6,6,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 128, 32, 139265],"float32"), output_size=tuple(2,2,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 128, 32, 139265],"float32"), output_size=tuple(3,3,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 128, 32, 139265],"float32"), output_size=tuple(6,6,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 128, 32, 262144],"float16"), output_size=tuple(2,2,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 128, 32, 262144],"float16"), output_size=tuple(3,3,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 128, 32, 262144],"float16"), output_size=tuple(6,6,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 128, 32, 262144],"float32"), output_size=tuple(2,2,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 128, 32, 262144],"float32"), output_size=tuple(3,3,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 128, 32, 262144],"float32"), output_size=tuple(6,6,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 160, 111412, 32],"float32"), output_size=2, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 160, 111412, 32],"float32"), output_size=4, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 160, 16, 222823],"float32"), output_size=2, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 160, 16, 222823],"float32"), output_size=4, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 160, 16, 419431],"float16"), output_size=2, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 160, 16, 419431],"float16"), output_size=4, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 160, 16, 419431],"float32"), output_size=2, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 160, 16, 419431],"float32"), output_size=4, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 160, 209716, 32],"float16"), output_size=2, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 160, 209716, 32],"float16"), output_size=4, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 160, 209716, 32],"float32"), output_size=2, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 160, 209716, 32],"float32"), output_size=4, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 2097152, 16, 32],"float16"), output_size=2, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 2097152, 16, 32],"float16"), output_size=4, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 2097152, 16, 32],"float32"), output_size=2, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 2097152, 16, 32],"float32"), output_size=4, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 3355444, 4, 80],"float32"), list[1,40,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 34817, 128, 128],"float32"), output_size=tuple(2,2,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 34817, 128, 128],"float32"), output_size=tuple(3,3,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 34817, 128, 128],"float32"), output_size=tuple(6,6,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 480, 14855, 80],"float32"), list[1,40,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 480, 27963, 80],"float32"), list[1,40,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 480, 4, 297097],"float32"), list[1,40,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 480, 4, 559241],"float32"), list[1,40,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 512, 128, 16384],"float16"), output_size=tuple(2,2,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 512, 128, 16384],"float16"), output_size=tuple(3,3,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 512, 128, 16384],"float16"), output_size=tuple(6,6,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 512, 128, 8705],"float32"), output_size=tuple(2,2,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 512, 128, 8705],"float32"), output_size=tuple(3,3,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 512, 128, 8705],"float32"), output_size=tuple(6,6,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 512, 16384, 128],"float16"), output_size=tuple(2,2,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 512, 16384, 128],"float16"), output_size=tuple(3,3,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 512, 16384, 128],"float16"), output_size=tuple(6,6,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 512, 8705, 128],"float32"), output_size=tuple(2,2,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 512, 8705, 128],"float32"), output_size=tuple(3,3,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 512, 8705, 128],"float32"), output_size=tuple(6,6,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 557057, 32, 32],"float32"), output_size=tuple(2,2,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 557057, 32, 32],"float32"), output_size=tuple(3,3,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 557057, 32, 32],"float32"), output_size=tuple(6,6,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 65536, 128, 128],"float16"), output_size=tuple(2,2,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 65536, 128, 128],"float16"), output_size=tuple(3,3,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 65536, 128, 128],"float16"), output_size=tuple(6,6,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([42800, 128, 28, 28],"float16"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([42800, 128, 28, 28],"float32"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([47535446, 3, 4, 4],"float32"), output_size=list[3,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 256, 1311, 25],"float16"), output_size=list[1,25,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 256, 1311, 25],"float32"), output_size=list[1,25,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 256, 2, 16384],"float16"), output_size=list[1,25,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 256, 2, 16384],"float32"), output_size=list[1,25,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 256, 2, 8705],"float32"), output_size=list[1,25,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 256, 697, 25],"float32"), output_size=list[1,25,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 512, 128, 128],"float16"), output_size=tuple(2,2,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 512, 128, 128],"float16"), output_size=tuple(3,3,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 512, 128, 128],"float16"), output_size=tuple(6,6,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 512, 128, 128],"float32"), output_size=tuple(2,2,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 512, 128, 128],"float32"), output_size=tuple(3,3,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 512, 128, 128],"float32"), output_size=tuple(6,6,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 89129, 2, 25],"float32"), output_size=list[1,25,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([52429, 160, 16, 32],"float16"), output_size=2, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([52429, 160, 16, 32],"float16"), output_size=4, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([52429, 160, 16, 32],"float32"), output_size=2, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([52429, 160, 16, 32],"float32"), output_size=4, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([5350, 256, 56, 56],"float32"), output_size=list[7,7,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([68479, 320, 14, 14],"float16"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([68479, 320, 14, 14],"float32"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([6964, 1024, 4, 80],"float32"), list[1,40,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([89478486, 3, 4, 4],"float16"), output_size=list[1,4,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([89478486, 3, 4, 4],"float16"), output_size=list[2,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([96, 480, 4, 12380],"float32"), list[1,40,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([96, 480, 619, 80],"float32"), list[1,40,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([96, 74275, 4, 80],"float32"), list[1,40,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([15521779, 3, 7, 7],"float32"), output_size=list[3,3,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([15521779, 3, 7, 7],"float32"), output_size=list[None,3,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 134217729, 4, 4],"float16"), output_size=list[1,4,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 134217729, 4, 4],"float16"), output_size=list[2,3,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 23282668, 7, 7],"float32"), output_size=list[3,3,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 23282668, 7, 7],"float32"), output_size=list[None,3,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 3, 102261127, 7],"float32"), output_size=5, )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 3, 102261127, 7],"float32"), output_size=list[2,5,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 3, 102261127, 7],"float32"), output_size=list[3,3,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 3, 178956971, 4],"float16"), output_size=list[1,4,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 3, 178956971, 4],"float16"), output_size=list[2,3,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 3, 178956971, 4],"float16"), output_size=list[3,3,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 3, 178956971, 4],"float32"), output_size=list[3,3,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 3, 4, 178956971],"float16"), output_size=list[1,4,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 3, 4, 178956971],"float16"), output_size=list[2,3,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 3, 4, 178956971],"float16"), output_size=list[3,3,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 3, 4, 178956971],"float32"), output_size=list[3,3,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 3, 7, 102261127],"float32"), output_size=5, )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 3, 7, 102261127],"float32"), output_size=list[2,5,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 3, 7, 102261127],"float32"), output_size=list[3,3,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 3, 7, 102261127],"float32"), output_size=list[None,3,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 43826197, 7, 7],"float32"), output_size=list[2,5,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 43826197, 7, 7],"float32"), output_size=list[3,3,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 43826197, 7, 7],"float32"), output_size=list[None,3,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 67108865, 4, 4],"float64"), output_size=list[1,4,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 67108865, 4, 4],"float64"), output_size=list[2,3,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 67108865, 4, 4],"float64"), output_size=list[3,3,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 71303169, 4, 4],"float32"), output_size=list[3,3,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([29217465, 3, 7, 7],"float32"), output_size=list[2,5,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([29217465, 3, 7, 7],"float32"), output_size=list[3,3,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([29217465, 3, 7, 7],"float32"), output_size=list[None,3,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([47535446, 3, 4, 4],"float32"), output_size=list[3,3,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([89478486, 3, 4, 4],"float16"), output_size=list[1,4,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([89478486, 3, 4, 4],"float16"), output_size=list[2,3,], )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 2037234, 16, 7, 10],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 2263593, 16, 7, 9],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 2546542, 16, 7, 8],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 2910334, 16, 7, 7],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 3834793, 16, 7, 10],"float16"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 3834793, 16, 7, 10],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 4793491, 16, 7, 8],"float16"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 5478275, 16, 7, 7],"float16"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 5478275, 16, 7, 7],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 114131, 7, 7],"float16"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 114131, 7, 7],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 16, 18569, 10],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 16, 20632, 9],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 16, 23211, 8],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 16, 26527, 7],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 16, 34953, 10],"float16"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 16, 34953, 10],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 16, 43691, 8],"float16"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 16, 49933, 7],"float16"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 16, 49933, 7],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 16, 7, 26527],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 16, 7, 49933],"float16"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 16, 7, 49933],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 42443, 7, 10],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 47159, 7, 9],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 53053, 7, 8],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 60632, 7, 7],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 79892, 7, 10],"float16"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 79892, 7, 10],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 99865, 7, 8],"float16"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([174763, 3, 8, 32, 32],"float16"), output_size=3, data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([174763, 3, 8, 32, 32],"float16"), output_size=list[1,1,1,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([174763, 3, 8, 32, 32],"float16"), output_size=list[1,3,2,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([174763, 3, 8, 32, 32],"float16"), output_size=list[2,2,2,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([174763, 3, 8, 32, 32],"float16"), output_size=list[2,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([174763, 3, 8, 32, 32],"float16"), output_size=list[3,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([174763, 3, 8, 32, 32],"float16"), output_size=tuple(3,3,3,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([174763, 3, 8, 32, 32],"float16"), output_size=tuple(3,3,3,), data_format="NDHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([174763, 3, 8, 32, 32],"float32"), output_size=list[3,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 131073, 8, 32, 32],"float64"), output_size=3, data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 131073, 8, 32, 32],"float64"), output_size=list[1,1,1,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 131073, 8, 32, 32],"float64"), output_size=list[1,3,2,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 131073, 8, 32, 32],"float64"), output_size=list[2,2,2,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 131073, 8, 32, 32],"float64"), output_size=list[2,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 131073, 8, 32, 32],"float64"), output_size=list[3,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 131073, 8, 32, 32],"float64"), output_size=tuple(3,3,3,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 131073, 8, 32, 32],"float64"), output_size=tuple(3,3,3,), data_format="NDHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 139265, 8, 32, 32],"float32"), output_size=list[3,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 262144, 8, 32, 32],"float32"), output_size=list[3,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 262145, 8, 32, 32],"float16"), output_size=3, data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 262145, 8, 32, 32],"float16"), output_size=list[1,1,1,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 262145, 8, 32, 32],"float16"), output_size=list[1,3,2,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 262145, 8, 32, 32],"float16"), output_size=list[2,2,2,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 262145, 8, 32, 32],"float16"), output_size=list[2,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 262145, 8, 32, 32],"float16"), output_size=list[3,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 262145, 8, 32, 32],"float16"), output_size=tuple(3,3,3,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 262145, 8, 32, 32],"float16"), output_size=tuple(3,3,3,), data_format="NDHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 14608733, 7, 7],"float32"), list[2,3,5,], )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 14608733, 7, 7],"float32"), output_size=5, data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 14608733, 7, 7],"float32"), output_size=list[2,3,5,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 14608733, 7, 7],"float32"), output_size=list[3,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 14608733, 7, 7],"float32"), output_size=list[3,3,3,], data_format="NDHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 14608733, 7, 7],"float32"), output_size=list[None,3,None,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 349526, 32, 32],"float64"), output_size=3, data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 349526, 32, 32],"float64"), output_size=list[1,1,1,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 349526, 32, 32],"float64"), output_size=list[1,3,2,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 349526, 32, 32],"float64"), output_size=list[2,2,2,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 349526, 32, 32],"float64"), output_size=list[2,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 349526, 32, 32],"float64"), output_size=list[3,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 349526, 32, 32],"float64"), output_size=tuple(3,3,3,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 349526, 32, 32],"float64"), output_size=tuple(3,3,3,), data_format="NDHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 371371, 32, 32],"float32"), output_size=list[3,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 5, 10865245, 7],"float32"), output_size=list[None,3,None,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 5, 20452226, 7],"float32"), list[2,3,5,], )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 5, 20452226, 7],"float32"), output_size=5, data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 5, 20452226, 7],"float32"), output_size=list[2,3,5,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 5, 20452226, 7],"float32"), output_size=list[3,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 5, 20452226, 7],"float32"), output_size=list[3,3,3,], data_format="NDHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 5, 20452226, 7],"float32"), output_size=list[None,3,None,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 5, 7, 10865245],"float32"), output_size=list[None,3,None,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 5, 7, 20452226],"float32"), list[2,3,5,], )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 5, 7, 20452226],"float32"), output_size=5, data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 5, 7, 20452226],"float32"), output_size=list[2,3,5,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 5, 7, 20452226],"float32"), output_size=list[3,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 5, 7, 20452226],"float32"), output_size=list[3,3,3,], data_format="NDHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 5, 7, 20452226],"float32"), output_size=list[None,3,None,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 699051, 32, 32],"float16"), output_size=3, data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 699051, 32, 32],"float16"), output_size=list[1,1,1,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 699051, 32, 32],"float16"), output_size=list[1,3,2,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 699051, 32, 32],"float16"), output_size=list[2,2,2,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 699051, 32, 32],"float16"), output_size=list[2,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 699051, 32, 32],"float16"), output_size=list[3,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 699051, 32, 32],"float16"), output_size=tuple(3,3,3,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 699051, 32, 32],"float16"), output_size=tuple(3,3,3,), data_format="NDHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 699051, 32, 32],"float32"), output_size=list[3,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 7760890, 7, 7],"float32"), output_size=list[None,3,None,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 1398102, 32],"float64"), output_size=3, data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 1398102, 32],"float64"), output_size=list[1,1,1,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 1398102, 32],"float64"), output_size=list[1,3,2,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 1398102, 32],"float64"), output_size=list[2,2,2,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 1398102, 32],"float64"), output_size=list[2,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 1398102, 32],"float64"), output_size=list[3,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 1398102, 32],"float64"), output_size=tuple(3,3,3,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 1398102, 32],"float64"), output_size=tuple(3,3,3,), data_format="NDHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 1485483, 32],"float32"), output_size=list[3,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 2796203, 32],"float16"), output_size=3, data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 2796203, 32],"float16"), output_size=list[1,1,1,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 2796203, 32],"float16"), output_size=list[1,3,2,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 2796203, 32],"float16"), output_size=list[2,2,2,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 2796203, 32],"float16"), output_size=list[2,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 2796203, 32],"float16"), output_size=list[3,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 2796203, 32],"float16"), output_size=tuple(3,3,3,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 2796203, 32],"float16"), output_size=tuple(3,3,3,), data_format="NDHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 2796203, 32],"float32"), output_size=list[3,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 32, 1398102],"float64"), output_size=3, data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 32, 1398102],"float64"), output_size=list[1,1,1,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 32, 1398102],"float64"), output_size=list[1,3,2,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 32, 1398102],"float64"), output_size=list[2,2,2,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 32, 1398102],"float64"), output_size=list[2,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 32, 1398102],"float64"), output_size=list[3,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 32, 1398102],"float64"), output_size=tuple(3,3,3,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 32, 1398102],"float64"), output_size=tuple(3,3,3,), data_format="NDHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 32, 1485483],"float32"), output_size=list[3,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 32, 2796203],"float16"), output_size=3, data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 32, 2796203],"float16"), output_size=list[1,1,1,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 32, 2796203],"float16"), output_size=list[2,2,2,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 32, 2796203],"float16"), output_size=list[2,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 32, 2796203],"float16"), output_size=list[3,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 32, 2796203],"float16"), output_size=tuple(3,3,3,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 32, 2796203],"float16"), output_size=tuple(3,3,3,), data_format="NDHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 32, 2796203],"float32"), output_size=list[3,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 4656534, 5, 7, 7],"float32"), output_size=list[None,3,None,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 8765240, 5, 7, 7],"float32"), list[2,3,5,], )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 8765240, 5, 7, 7],"float32"), output_size=5, data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 8765240, 5, 7, 7],"float32"), output_size=list[2,3,5,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 8765240, 5, 7, 7],"float32"), output_size=list[3,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 8765240, 5, 7, 7],"float32"), output_size=list[3,3,3,], data_format="NDHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 8765240, 5, 7, 7],"float32"), output_size=list[None,3,None,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2653, 768, 16, 7, 10],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2948, 768, 16, 7, 9],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([3104356, 3, 5, 7, 7],"float32"), output_size=list[None,3,None,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([3316, 768, 16, 7, 8],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([3790, 768, 16, 7, 7],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([4994, 768, 16, 7, 10],"float16"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([4994, 768, 16, 7, 10],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([5843493, 3, 5, 7, 7],"float32"), list[2,3,5,], )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([5843493, 3, 5, 7, 7],"float32"), output_size=5, data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([5843493, 3, 5, 7, 7],"float32"), output_size=list[2,3,5,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([5843493, 3, 5, 7, 7],"float32"), output_size=list[3,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([5843493, 3, 5, 7, 7],"float32"), output_size=list[3,3,3,], data_format="NDHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([5843493, 3, 5, 7, 7],"float32"), output_size=list[None,3,None,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([6242, 768, 16, 7, 8],"float16"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([7134, 768, 16, 7, 7],"float16"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([7134, 768, 16, 7, 7],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([87382, 3, 8, 32, 32],"float64"), output_size=3, data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([87382, 3, 8, 32, 32],"float64"), output_size=list[1,1,1,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([87382, 3, 8, 32, 32],"float64"), output_size=list[1,3,2,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([87382, 3, 8, 32, 32],"float64"), output_size=list[2,2,2,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([87382, 3, 8, 32, 32],"float64"), output_size=list[2,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([87382, 3, 8, 32, 32],"float64"), output_size=list[3,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([87382, 3, 8, 32, 32],"float64"), output_size=tuple(3,3,3,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([87382, 3, 8, 32, 32],"float64"), output_size=tuple(3,3,3,), data_format="NDHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([174763, 3, 8, 32, 32],"float16"), output_size=3, )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([174763, 3, 8, 32, 32],"float16"), output_size=list[1,1,1,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([174763, 3, 8, 32, 32],"float16"), output_size=list[1,3,2,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([174763, 3, 8, 32, 32],"float16"), output_size=list[2,2,2,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([174763, 3, 8, 32, 32],"float16"), output_size=list[2,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([174763, 3, 8, 32, 32],"float16"), output_size=list[3,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([174763, 3, 8, 32, 32],"float16"), output_size=tuple(3,3,3,), )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([174763, 3, 8, 32, 32],"float16"), output_size=tuple(3,3,3,), data_format="NCDHW", )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([174763, 3, 8, 32, 32],"float16"), output_size=tuple(3,3,3,), data_format="NDHWC", )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([174763, 3, 8, 32, 32],"float32"), output_size=list[3,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 131073, 8, 32, 32],"float64"), output_size=list[1,1,1,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 131073, 8, 32, 32],"float64"), output_size=list[1,3,2,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 131073, 8, 32, 32],"float64"), output_size=list[2,2,2,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 131073, 8, 32, 32],"float64"), output_size=list[2,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 131073, 8, 32, 32],"float64"), output_size=list[3,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 131073, 8, 32, 32],"float64"), output_size=tuple(3,3,3,), )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 131073, 8, 32, 32],"float64"), output_size=tuple(3,3,3,), data_format="NCDHW", )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 131073, 8, 32, 32],"float64"), output_size=tuple(3,3,3,), data_format="NDHWC", )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 139265, 8, 32, 32],"float32"), output_size=list[3,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 262144, 8, 32, 32],"float32"), output_size=list[3,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 262145, 8, 32, 32],"float16"), output_size=3, )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 262145, 8, 32, 32],"float16"), output_size=list[1,1,1,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 262145, 8, 32, 32],"float16"), output_size=list[1,3,2,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 262145, 8, 32, 32],"float16"), output_size=list[2,2,2,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 262145, 8, 32, 32],"float16"), output_size=list[2,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 262145, 8, 32, 32],"float16"), output_size=list[3,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 262145, 8, 32, 32],"float16"), output_size=tuple(3,3,3,), )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 262145, 8, 32, 32],"float16"), output_size=tuple(3,3,3,), data_format="NCDHW", )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 262145, 8, 32, 32],"float16"), output_size=tuple(3,3,3,), data_format="NDHWC", )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 14608733, 7, 7],"float32"), output_size=5, )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 14608733, 7, 7],"float32"), output_size=list[2,3,5,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 14608733, 7, 7],"float32"), output_size=list[3,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 14608733, 7, 7],"float32"), output_size=list[3,3,3,], data_format="NDHWC", )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 14608733, 7, 7],"float32"), output_size=list[None,3,None,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 349526, 32, 32],"float64"), output_size=3, )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 349526, 32, 32],"float64"), output_size=list[1,1,1,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 349526, 32, 32],"float64"), output_size=list[1,3,2,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 349526, 32, 32],"float64"), output_size=list[2,2,2,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 349526, 32, 32],"float64"), output_size=list[2,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 349526, 32, 32],"float64"), output_size=list[3,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 349526, 32, 32],"float64"), output_size=tuple(3,3,3,), )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 349526, 32, 32],"float64"), output_size=tuple(3,3,3,), data_format="NCDHW", )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 349526, 32, 32],"float64"), output_size=tuple(3,3,3,), data_format="NDHWC", )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 371371, 32, 32],"float32"), output_size=list[3,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 5, 10865245, 7],"float32"), output_size=list[None,3,None,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 5, 20452226, 7],"float32"), output_size=5, )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 5, 20452226, 7],"float32"), output_size=list[2,3,5,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 5, 20452226, 7],"float32"), output_size=list[3,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 5, 20452226, 7],"float32"), output_size=list[3,3,3,], data_format="NDHWC", )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 5, 20452226, 7],"float32"), output_size=list[None,3,None,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 5, 7, 10865245],"float32"), output_size=list[None,3,None,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 5, 7, 20452226],"float32"), output_size=5, )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 5, 7, 20452226],"float32"), output_size=list[2,3,5,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 5, 7, 20452226],"float32"), output_size=list[3,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 5, 7, 20452226],"float32"), output_size=list[3,3,3,], data_format="NDHWC", )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 5, 7, 20452226],"float32"), output_size=list[None,3,None,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 699051, 32, 32],"float16"), output_size=3, )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 699051, 32, 32],"float16"), output_size=list[1,1,1,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 699051, 32, 32],"float16"), output_size=list[1,3,2,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 699051, 32, 32],"float16"), output_size=list[2,2,2,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 699051, 32, 32],"float16"), output_size=list[2,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 699051, 32, 32],"float16"), output_size=list[3,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 699051, 32, 32],"float16"), output_size=tuple(3,3,3,), )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 699051, 32, 32],"float16"), output_size=tuple(3,3,3,), data_format="NCDHW", )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 699051, 32, 32],"float16"), output_size=tuple(3,3,3,), data_format="NDHWC", )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 699051, 32, 32],"float32"), output_size=list[3,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 7760890, 7, 7],"float32"), output_size=list[None,3,None,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 1398102, 32],"float64"), output_size=3, )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 1398102, 32],"float64"), output_size=list[1,1,1,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 1398102, 32],"float64"), output_size=list[1,3,2,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 1398102, 32],"float64"), output_size=list[2,2,2,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 1398102, 32],"float64"), output_size=list[2,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 1398102, 32],"float64"), output_size=list[3,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 1398102, 32],"float64"), output_size=tuple(3,3,3,), )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 1398102, 32],"float64"), output_size=tuple(3,3,3,), data_format="NCDHW", )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 1398102, 32],"float64"), output_size=tuple(3,3,3,), data_format="NDHWC", )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 1485483, 32],"float32"), output_size=list[3,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 2796203, 32],"float16"), output_size=3, )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 2796203, 32],"float16"), output_size=list[1,1,1,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 2796203, 32],"float16"), output_size=list[1,3,2,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 2796203, 32],"float16"), output_size=list[2,2,2,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 2796203, 32],"float16"), output_size=list[2,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 2796203, 32],"float16"), output_size=list[3,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 2796203, 32],"float16"), output_size=tuple(3,3,3,), )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 2796203, 32],"float16"), output_size=tuple(3,3,3,), data_format="NCDHW", )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 2796203, 32],"float16"), output_size=tuple(3,3,3,), data_format="NDHWC", )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 2796203, 32],"float32"), output_size=list[3,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 32, 1398102],"float64"), output_size=3, )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 32, 1398102],"float64"), output_size=list[1,1,1,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 32, 1398102],"float64"), output_size=list[1,3,2,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 32, 1398102],"float64"), output_size=list[2,2,2,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 32, 1398102],"float64"), output_size=list[2,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 32, 1398102],"float64"), output_size=list[3,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 32, 1398102],"float64"), output_size=tuple(3,3,3,), )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 32, 1398102],"float64"), output_size=tuple(3,3,3,), data_format="NCDHW", )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 32, 1398102],"float64"), output_size=tuple(3,3,3,), data_format="NDHWC", )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 32, 1485483],"float32"), output_size=list[3,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 32, 2796203],"float16"), output_size=3, )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 32, 2796203],"float16"), output_size=list[1,1,1,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 32, 2796203],"float16"), output_size=list[1,3,2,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 32, 2796203],"float16"), output_size=list[2,2,2,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 32, 2796203],"float16"), output_size=list[2,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 32, 2796203],"float16"), output_size=list[3,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 32, 2796203],"float16"), output_size=tuple(3,3,3,), )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 32, 2796203],"float16"), output_size=tuple(3,3,3,), data_format="NCDHW", )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 32, 2796203],"float16"), output_size=tuple(3,3,3,), data_format="NDHWC", )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 32, 2796203],"float32"), output_size=list[3,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 4656534, 5, 7, 7],"float32"), output_size=list[None,3,None,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 8765240, 5, 7, 7],"float32"), output_size=5, )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 8765240, 5, 7, 7],"float32"), output_size=list[2,3,5,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 8765240, 5, 7, 7],"float32"), output_size=list[3,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 8765240, 5, 7, 7],"float32"), output_size=list[3,3,3,], data_format="NDHWC", )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 8765240, 5, 7, 7],"float32"), output_size=list[None,3,None,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([3104356, 3, 5, 7, 7],"float32"), output_size=list[None,3,None,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([5843493, 3, 5, 7, 7],"float32"), output_size=5, )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([5843493, 3, 5, 7, 7],"float32"), output_size=list[2,3,5,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([5843493, 3, 5, 7, 7],"float32"), output_size=list[3,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([5843493, 3, 5, 7, 7],"float32"), output_size=list[3,3,3,], data_format="NDHWC", )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([5843493, 3, 5, 7, 7],"float32"), output_size=list[None,3,None,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([87382, 3, 8, 32, 32],"float64"), output_size=3, )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([87382, 3, 8, 32, 32],"float64"), output_size=list[1,1,1,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([87382, 3, 8, 32, 32],"float64"), output_size=list[1,3,2,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([87382, 3, 8, 32, 32],"float64"), output_size=list[2,2,2,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([87382, 3, 8, 32, 32],"float64"), output_size=list[2,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([87382, 3, 8, 32, 32],"float64"), output_size=list[3,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([87382, 3, 8, 32, 32],"float64"), output_size=tuple(3,3,3,), )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([87382, 3, 8, 32, 32],"float64"), output_size=tuple(3,3,3,), data_format="NCDHW", )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([87382, 3, 8, 32, 32],"float64"), output_size=tuple(3,3,3,), data_format="NDHWC", )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([92843, 3, 8, 32, 32],"float32"), output_size=list[3,3,3,], )
paddle.nn.functional.adaptive_max_pool1d(Tensor([2, 142606337, 8],"float32"), 4, False, None, )
paddle.nn.functional.adaptive_max_pool1d(Tensor([2, 3, 380283564],"float32"), 16, False, None, )
paddle.nn.functional.adaptive_max_pool1d(Tensor([2, 3, 380283564],"float32"), 4, False, None, )
paddle.nn.functional.adaptive_max_pool1d(Tensor([2, 3, 380283564],"float32"), output_size=16, )
paddle.nn.functional.adaptive_max_pool1d(Tensor([2, 3, 715827883],"float16"), 4, False, None, )
paddle.nn.functional.adaptive_max_pool1d(Tensor([2, 3, 715827883],"float16"), 8, False, None, )
paddle.nn.functional.adaptive_max_pool1d(Tensor([2, 35651585, 32],"float32"), 16, False, None, )
paddle.nn.functional.adaptive_max_pool1d(Tensor([2, 35651585, 32],"float32"), output_size=16, )
paddle.nn.functional.adaptive_max_pool1d(Tensor([2, 67108864, 32],"float32"), 16, False, None, )
paddle.nn.functional.adaptive_max_pool1d(Tensor([2, 67108864, 32],"float32"), output_size=16, )
paddle.nn.functional.adaptive_max_pool1d(Tensor([2, 67108865, 32],"float16"), 8, False, None, )
paddle.nn.functional.adaptive_max_pool1d(Tensor([23767723, 3, 32],"float32"), 16, False, None, )
paddle.nn.functional.adaptive_max_pool1d(Tensor([23767723, 3, 32],"float32"), output_size=16, )
paddle.nn.functional.adaptive_max_pool1d(Tensor([44739243, 3, 32],"float16"), 8, False, None, )
paddle.nn.functional.adaptive_max_pool1d(Tensor([95070891, 3, 8],"float32"), 4, False, None, )
paddle.nn.functional.adaptive_max_pool1d(x=Tensor([2, 142606337, 8],"float32"), output_size=4, )
paddle.nn.functional.adaptive_max_pool1d(x=Tensor([2, 3, 380283564],"float32"), output_size=4, )
paddle.nn.functional.adaptive_max_pool1d(x=Tensor([2, 3, 715827883],"float16"), output_size=4, )
paddle.nn.functional.adaptive_max_pool1d(x=Tensor([2, 3, 715827883],"float16"), output_size=8, )
paddle.nn.functional.adaptive_max_pool1d(x=Tensor([2, 67108865, 32],"float16"), output_size=8, )
paddle.nn.functional.adaptive_max_pool1d(x=Tensor([44739243, 3, 32],"float16"), output_size=8, )
paddle.nn.functional.adaptive_max_pool1d(x=Tensor([95070891, 3, 8],"float32"), output_size=4, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([1, 2, 268435457, 8],"float16"), output_size=4, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([1, 2, 8, 268435457],"float16"), output_size=4, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([1, 67108865, 8, 8],"float16"), output_size=4, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([15521779, 3, 7, 7],"float32"), output_size=5, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([15521779, 3, 7, 7],"float32"), output_size=list[2,5,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([15521779, 3, 7, 7],"float32"), output_size=list[3,3,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([15521779, 3, 7, 7],"float32"), output_size=list[None,3,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 1, 142606337, 8],"float32"), output_size=3, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 1, 268435457, 8],"float16"), output_size=3, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 1, 8, 142606337],"float32"), output_size=3, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 1, 8, 268435457],"float16"), output_size=3, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 17825793, 8, 8],"float32"), output_size=3, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 23282668, 7, 7],"float32"), output_size=list[2,5,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 23282668, 7, 7],"float32"), output_size=list[3,3,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 23282668, 7, 7],"float32"), output_size=list[None,3,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 3, 54326224, 7],"float32"), output_size=5, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 3, 54326224, 7],"float32"), output_size=list[2,5,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 3, 54326224, 7],"float32"), output_size=list[3,3,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 3, 54326224, 7],"float32"), output_size=list[None,3,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 3, 7, 54326224],"float32"), output_size=5, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 3, 7, 54326224],"float32"), output_size=list[2,5,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 3, 7, 54326224],"float32"), output_size=list[3,3,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 3, 7, 54326224],"float32"), output_size=list[None,3,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 33554433, 8, 8],"float16"), output_size=3, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([29217465, 3, 7, 7],"float32"), output_size=list[2,5,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([29217465, 3, 7, 7],"float32"), output_size=list[3,3,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([29217465, 3, 7, 7],"float32"), output_size=list[None,3,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([33554433, 2, 8, 8],"float16"), output_size=4, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([35651585, 1, 8, 8],"float32"), output_size=3, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([67108865, 1, 8, 8],"float16"), output_size=3, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([1, 2, 268435457, 8],"float16"), output_size=4, )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([1, 2, 8, 268435457],"float16"), output_size=4, )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([1, 67108865, 8, 8],"float16"), output_size=4, )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([15521779, 3, 7, 7],"float32"), output_size=5, )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([15521779, 3, 7, 7],"float32"), output_size=list[2,5,], )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([15521779, 3, 7, 7],"float32"), output_size=list[None,3,], )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([15521779, 3, 7, 7],"float32"), return_mask=False, output_size=list[3,3,], )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([2, 1, 142606337, 8],"float32"), output_size=3, )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([2, 1, 268435457, 8],"float16"), output_size=3, )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([2, 1, 8, 142606337],"float32"), output_size=3, )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([2, 1, 8, 268435457],"float16"), output_size=3, )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([2, 17825793, 8, 8],"float32"), output_size=3, )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([2, 23282668, 7, 7],"float32"), output_size=5, )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([2, 23282668, 7, 7],"float32"), output_size=list[2,5,], )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([2, 23282668, 7, 7],"float32"), output_size=list[None,3,], )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([2, 23282668, 7, 7],"float32"), return_mask=False, output_size=list[3,3,], )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([2, 3, 54326224, 7],"float32"), output_size=5, )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([2, 3, 54326224, 7],"float32"), output_size=list[2,5,], )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([2, 3, 54326224, 7],"float32"), output_size=list[None,3,], )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([2, 3, 54326224, 7],"float32"), return_mask=False, output_size=list[3,3,], )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([2, 3, 7, 54326224],"float32"), output_size=5, )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([2, 3, 7, 54326224],"float32"), output_size=list[2,5,], )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([2, 3, 7, 54326224],"float32"), output_size=list[None,3,], )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([2, 3, 7, 54326224],"float32"), return_mask=False, output_size=list[3,3,], )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([2, 33554433, 8, 8],"float16"), output_size=3, )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([29217465, 3, 7, 7],"float32"), output_size=list[2,5,], )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([29217465, 3, 7, 7],"float32"), output_size=list[None,3,], )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([29217465, 3, 7, 7],"float32"), return_mask=False, output_size=list[3,3,], )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([33554433, 2, 8, 8],"float16"), output_size=4, )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([35651585, 1, 8, 8],"float32"), output_size=3, )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([67108865, 1, 8, 8],"float16"), output_size=3, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([1, 2, 17825793, 8, 8],"float32"), output_size=4, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([1, 2, 33554433, 8, 8],"float16"), output_size=4, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([1, 2, 8, 17825793, 8],"float32"), output_size=4, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([1, 2, 8, 33554433, 8],"float16"), output_size=4, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([1, 2, 8, 8, 17825793],"float32"), output_size=4, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([1, 2, 8, 8, 33554433],"float16"), output_size=4, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([1, 4456449, 8, 8, 8],"float32"), output_size=4, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([1, 8388609, 8, 8, 8],"float16"), output_size=4, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 3, 5, 10865245, 7],"float32"), output_size=5, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 3, 5, 10865245, 7],"float32"), output_size=list[2,3,5,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 3, 5, 10865245, 7],"float32"), output_size=list[3,3,3,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 3, 5, 10865245, 7],"float32"), output_size=list[None,3,None,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 3, 5, 7, 10865245],"float32"), output_size=5, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 3, 5, 7, 10865245],"float32"), output_size=list[2,3,5,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 3, 5, 7, 10865245],"float32"), output_size=list[3,3,3,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 3, 5, 7, 10865245],"float32"), output_size=list[None,3,None,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 3, 7760890, 7, 7],"float32"), output_size=5, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 3, 7760890, 7, 7],"float32"), output_size=list[2,3,5,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 3, 7760890, 7, 7],"float32"), output_size=list[3,3,3,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 3, 7760890, 7, 7],"float32"), output_size=list[None,3,None,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 4656534, 5, 7, 7],"float32"), output_size=5, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 4656534, 5, 7, 7],"float32"), output_size=list[2,3,5,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 4656534, 5, 7, 7],"float32"), output_size=list[3,3,3,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 4656534, 5, 7, 7],"float32"), output_size=list[None,3,None,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([2228225, 2, 8, 8, 8],"float32"), output_size=4, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([3104356, 3, 5, 7, 7],"float32"), output_size=5, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([3104356, 3, 5, 7, 7],"float32"), output_size=list[2,3,5,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([3104356, 3, 5, 7, 7],"float32"), output_size=list[3,3,3,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([3104356, 3, 5, 7, 7],"float32"), output_size=list[None,3,None,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([4194305, 2, 8, 8, 8],"float16"), output_size=4, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([1, 2, 17825793, 8, 8],"float32"), output_size=4, )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([1, 2, 33554433, 8, 8],"float16"), output_size=4, )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([1, 2, 8, 17825793, 8],"float32"), output_size=4, )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([1, 2, 8, 33554433, 8],"float16"), output_size=4, )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([1, 2, 8, 8, 17825793],"float32"), output_size=4, )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([1, 2, 8, 8, 33554433],"float16"), output_size=4, )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([1, 4456449, 8, 8, 8],"float32"), output_size=4, )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([1, 8388609, 8, 8, 8],"float16"), output_size=4, )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([2, 3, 5, 10865245, 7],"float32"), output_size=5, )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([2, 3, 5, 10865245, 7],"float32"), output_size=list[2,3,5,], )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([2, 3, 5, 10865245, 7],"float32"), output_size=list[3,3,3,], )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([2, 3, 5, 10865245, 7],"float32"), output_size=list[None,3,None,], )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([2, 3, 5, 7, 10865245],"float32"), output_size=5, )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([2, 3, 5, 7, 10865245],"float32"), output_size=list[2,3,5,], )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([2, 3, 5, 7, 10865245],"float32"), output_size=list[3,3,3,], )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([2, 3, 5, 7, 10865245],"float32"), output_size=list[None,3,None,], )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([2, 3, 7760890, 7, 7],"float32"), output_size=5, )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([2, 3, 7760890, 7, 7],"float32"), output_size=list[2,3,5,], )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([2, 3, 7760890, 7, 7],"float32"), output_size=list[3,3,3,], )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([2, 3, 7760890, 7, 7],"float32"), output_size=list[None,3,None,], )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([2, 4656534, 5, 7, 7],"float32"), output_size=5, )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([2, 4656534, 5, 7, 7],"float32"), output_size=list[2,3,5,], )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([2, 4656534, 5, 7, 7],"float32"), output_size=list[3,3,3,], )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([2, 4656534, 5, 7, 7],"float32"), output_size=list[None,3,None,], )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([2228225, 2, 8, 8, 8],"float32"), output_size=4, )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([3104356, 3, 5, 7, 7],"float32"), output_size=5, )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([3104356, 3, 5, 7, 7],"float32"), output_size=list[2,3,5,], )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([3104356, 3, 5, 7, 7],"float32"), output_size=list[3,3,3,], )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([3104356, 3, 5, 7, 7],"float32"), output_size=list[None,3,None,], )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([4194305, 2, 8, 8, 8],"float16"), output_size=4, )
paddle.nn.functional.avg_pool1d(Tensor([2, 134217729, 8],"float64"), 2, 1, 0, True, True, None, )
paddle.nn.functional.avg_pool1d(Tensor([2, 134217729, 8],"float64"), 2, 2, 0, True, False, None, )
paddle.nn.functional.avg_pool1d(Tensor([2, 134217729, 8],"float64"), 3, 4, 0, True, False, None, )
paddle.nn.functional.avg_pool1d(Tensor([2, 3, 357913942],"float64"), 2, 1, 0, True, True, None, )
paddle.nn.functional.avg_pool1d(Tensor([2, 3, 357913942],"float64"), 2, 2, 0, True, False, None, )
paddle.nn.functional.avg_pool1d(Tensor([2, 3, 357913942],"float64"), 3, 4, 0, True, False, None, )
paddle.nn.functional.avg_pool1d(Tensor([2, 3, 715827883],"float32"), 2, 2, 0, True, False, None, )
paddle.nn.functional.avg_pool1d(Tensor([2, 3, 715827883],"float32"), 2, None, 0, True, False, None, )
paddle.nn.functional.avg_pool1d(Tensor([2, 3, 715827883],"float32"), kernel_size=2, stride=2, padding=list[0,], )
paddle.nn.functional.avg_pool1d(Tensor([89478486, 3, 8],"float64"), 2, 1, 0, True, True, None, )
paddle.nn.functional.avg_pool1d(Tensor([89478486, 3, 8],"float64"), 2, 2, 0, True, False, None, )
paddle.nn.functional.avg_pool1d(Tensor([89478486, 3, 8],"float64"), 3, 4, 0, True, False, None, )
paddle.nn.functional.avg_pool1d(x=Tensor([2, 134217729, 8],"float64"), kernel_size=2, stride=1, padding=0, ceil_mode=True, )
paddle.nn.functional.avg_pool1d(x=Tensor([2, 134217729, 8],"float64"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.avg_pool1d(x=Tensor([2, 134217729, 8],"float64"), kernel_size=3, stride=4, padding=0, )
paddle.nn.functional.avg_pool1d(x=Tensor([2, 3, 357913942],"float64"), kernel_size=2, stride=1, padding=0, ceil_mode=True, )
paddle.nn.functional.avg_pool1d(x=Tensor([2, 3, 357913942],"float64"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.avg_pool1d(x=Tensor([2, 3, 357913942],"float64"), kernel_size=3, stride=4, padding=0, )
paddle.nn.functional.avg_pool1d(x=Tensor([2, 3, 715827883],"float32"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.avg_pool1d(x=Tensor([89478486, 3, 8],"float64"), kernel_size=2, stride=1, padding=0, ceil_mode=True, )
paddle.nn.functional.avg_pool1d(x=Tensor([89478486, 3, 8],"float64"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.avg_pool1d(x=Tensor([89478486, 3, 8],"float64"), kernel_size=3, stride=4, padding=0, )
paddle.nn.functional.avg_pool2d(Tensor([1, 1024, 40, 104858],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 1024, 42, 99865],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 1024, 44, 95326],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 1024, 65536, 64],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 1024, 67651, 62],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 1024, 69906, 60],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 1024, 77673, 54],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 10737419, 20, 20],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 128, 1677722, 20],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 128, 20, 1677722],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 1597831, 42, 64],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 1626882, 44, 60],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 171798692, 5, 5],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 1731842, 40, 62],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 1789570, 40, 60],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 1988411, 40, 54],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 21913099, 14, 14],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 256, 10, 1677722],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 256, 1677722, 10],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 42949673, 10, 10],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 477218589, 3, 3],"float32"), kernel_size=2, stride=1, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 512, 1677722, 5],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 512, 5, 1677722],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 8, 14, 38347923],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 8, 38347923, 14],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([105352, 208, 14, 14],"float16"), kernel_size=3, stride=2, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([10700, 512, 28, 28],"float32"), kernel_size=2, stride=2, padding="SAME", ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([119304648, 4, 3, 3],"float32"), kernel_size=2, stride=1, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1398102, 3, 32, 32],"float32"), kernel_size=2, stride=2, )
paddle.nn.functional.avg_pool2d(Tensor([1398102, 3, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.avg_pool2d(Tensor([1398102, 3, 32, 32],"float32"), kernel_size=2, stride=2, padding=list[list[0,0,],list[0,0,],list[0,0,],list[0,0,],], divisor_override=4, )
paddle.nn.functional.avg_pool2d(Tensor([1398102, 3, 32, 32],"float32"), kernel_size=2, stride=None, padding="SAME", )
paddle.nn.functional.avg_pool2d(Tensor([1398102, 3, 32, 32],"float32"), kernel_size=list[2,2,], stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1561, 1024, 42, 64],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1589, 1024, 44, 60],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([16, 1024, 32768, 8],"float32"), kernel_size=tuple(2,2,), stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([16, 1024, 4, 65536],"float32"), kernel_size=tuple(2,2,), stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([16, 1024, 65536, 4],"float32"), kernel_size=tuple(2,2,), stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([16, 1024, 8, 32768],"float32"), kernel_size=tuple(2,2,), stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([16, 128, 256, 8192],"float32"), kernel_size=tuple(2,2,), stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([16, 128, 32, 65536],"float32"), kernel_size=tuple(2,2,), stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([16, 128, 32768, 64],"float32"), kernel_size=tuple(2,2,), stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([16, 128, 64, 32768],"float32"), kernel_size=tuple(2,2,), stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([16, 128, 65536, 32],"float32"), kernel_size=tuple(2,2,), stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([16, 128, 8192, 256],"float32"), kernel_size=tuple(2,2,), stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([16, 16777216, 4, 4],"float32"), kernel_size=tuple(2,2,), stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([16, 262144, 32, 32],"float32"), kernel_size=tuple(2,2,), stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([16, 4096, 256, 256],"float32"), kernel_size=tuple(2,2,), stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([16, 4194304, 8, 8],"float32"), kernel_size=tuple(2,2,), stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([16, 65536, 64, 64],"float32"), kernel_size=tuple(2,2,), stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([167773, 256, 10, 10],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1692, 1024, 40, 62],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1748, 1024, 40, 60],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1942, 1024, 40, 54],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 1048577, 32, 32],"float64"), kernel_size=list[2,2,], stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 1048577, 32, 32],"float64"), kernel_size=list[3,3,], stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 1056, 14, 145258],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 1056, 145258, 14],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 10956550, 14, 14],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 12707004, 13, 13],"float32"), kernel_size=5, stride=3, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 134217729, 4, 4],"float16"), kernel_size=list[3,3,], stride=list[3,3,], padding=list[0,0,0,0,], ceil_mode=True, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 2097152, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.avg_pool2d(Tensor([2, 2097152, 32, 32],"float32"), kernel_size=2, stride=2, padding=list[list[0,0,],list[0,0,],list[0,0,],list[0,0,],], divisor_override=4, )
paddle.nn.functional.avg_pool2d(Tensor([2, 2097152, 32, 32],"float32"), kernel_size=2, stride=None, padding="SAME", )
paddle.nn.functional.avg_pool2d(Tensor([2, 2097152, 32, 32],"float32"), kernel_size=list[2,2,], stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 11184811, 32],"float64"), kernel_size=list[2,2,], stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 11184811, 32],"float64"), kernel_size=list[3,3,], stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 178956971, 4],"float16"), kernel_size=list[3,3,], stride=list[3,3,], padding=list[0,0,0,0,], ceil_mode=True, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 22369622, 32],"float32"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 22369622, 32],"float32"), kernel_size=2, stride=None, padding="SAME", )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 22369622, 32],"float32"), kernel_size=list[2,2,], stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 32, 11184811],"float64"), kernel_size=list[2,2,], stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 32, 11184811],"float64"), kernel_size=list[3,3,], stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 32, 22369622],"float32"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 32, 22369622],"float32"), kernel_size=2, stride=2, padding=list[list[0,0,],list[0,0,],list[0,0,],list[0,0,],], divisor_override=4, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 32, 22369622],"float32"), kernel_size=2, stride=None, padding="SAME", )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 32, 22369622],"float32"), kernel_size=list[2,2,], stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 4, 178956971],"float16"), kernel_size=list[3,3,], stride=list[3,3,], padding=list[0,0,0,0,], ceil_mode=True, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 4, 89478486],"float64"), kernel_size=list[3,3,], stride=list[1,1,], padding=list[0,0,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 4, 89478486],"float64"), kernel_size=list[3,3,], stride=list[3,3,], padding=list[0,0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 4, 89478486],"float64"), kernel_size=list[3,3,], stride=list[3,3,], padding=list[0,0,0,0,], ceil_mode=True, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 4, 89478486],"float64"), kernel_size=list[3,3,], stride=tuple(1,1,), padding=list[0,0,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 4, 89478486],"float64"), kernel_size=list[3,3,], stride=tuple(1,1,), padding=tuple(0,0,), ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 89478486, 4],"float64"), kernel_size=list[3,3,], stride=list[1,1,], padding=list[0,0,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 89478486, 4],"float64"), kernel_size=list[3,3,], stride=list[3,3,], padding=list[0,0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 89478486, 4],"float64"), kernel_size=list[3,3,], stride=list[3,3,], padding=list[0,0,0,0,], ceil_mode=True, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 89478486, 4],"float64"), kernel_size=list[3,3,], stride=tuple(1,1,), padding=list[0,0,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 89478486, 4],"float64"), kernel_size=list[3,3,], stride=tuple(1,1,), padding=tuple(0,0,), ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 512, 13, 322639],"float32"), kernel_size=5, stride=3, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 512, 322639, 13],"float32"), kernel_size=5, stride=3, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 528, 13, 312862],"float32"), kernel_size=5, stride=3, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 528, 312862, 13],"float32"), kernel_size=5, stride=3, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 67108865, 4, 4],"float64"), kernel_size=list[3,3,], stride=list[1,1,], padding=list[0,0,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 67108865, 4, 4],"float64"), kernel_size=list[3,3,], stride=list[3,3,], padding=list[0,0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 67108865, 4, 4],"float64"), kernel_size=list[3,3,], stride=list[3,3,], padding=list[0,0,0,0,], ceil_mode=True, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 67108865, 4, 4],"float64"), kernel_size=list[3,3,], stride=tuple(1,1,), padding=list[0,0,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 67108865, 4, 4],"float64"), kernel_size=list[3,3,], stride=tuple(1,1,), padding=tuple(0,0,), ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([20752, 1056, 14, 14],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([21400, 1024, 14, 14],"float16"), kernel_size=2, stride=2, padding="SAME", ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([21400, 1024, 14, 14],"float32"), kernel_size=2, stride=2, padding="SAME", ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([22369622, 3, 8, 8],"float32"), kernel_size=2, stride=2, )
paddle.nn.functional.avg_pool2d(Tensor([262144, 1024, 4, 4],"float32"), kernel_size=tuple(2,2,), stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2739138, 8, 14, 14],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([32, 1024, 14, 9363],"float32"), kernel_size=2, stride=2, padding="SAME", ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([32, 1024, 9363, 14],"float32"), kernel_size=2, stride=2, padding="SAME", ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([32, 171197, 28, 28],"float32"), kernel_size=2, stride=2, padding="SAME", ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([32, 256, 56, 9363],"float32"), kernel_size=2, stride=2, padding="SAME", ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([32, 256, 9363, 56],"float32"), kernel_size=2, stride=2, padding="SAME", ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([32, 42800, 56, 56],"float32"), kernel_size=2, stride=2, padding="SAME", ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([32, 512, 28, 9363],"float32"), kernel_size=2, stride=2, padding="SAME", ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([32, 512, 9363, 28],"float32"), kernel_size=2, stride=2, padding="SAME", ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([32, 684785, 14, 14],"float32"), kernel_size=2, stride=2, padding="SAME", ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([32768, 128, 32, 32],"float32"), kernel_size=tuple(2,2,), stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([335545, 512, 5, 5],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([349526, 3, 64, 64],"float32"), kernel_size=2, stride=2, )
paddle.nn.functional.avg_pool2d(Tensor([34953, 384, 4, 80],"float32"), list[4,2,], )
paddle.nn.functional.avg_pool2d(Tensor([34953, 512, 3, 80],"float16"), kernel_size=list[3,2,], stride=list[3,2,], padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([34953, 512, 3, 80],"float32"), kernel_size=list[2,2,], stride=list[2,2,], padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([34953, 512, 3, 80],"float32"), kernel_size=list[3,2,], stride=list[3,2,], padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([4, 3355444, 4, 80],"float32"), list[4,2,], )
paddle.nn.functional.avg_pool2d(Tensor([4, 384, 34953, 80],"float32"), list[4,2,], )
paddle.nn.functional.avg_pool2d(Tensor([4, 384, 4, 699051],"float32"), list[4,2,], )
paddle.nn.functional.avg_pool2d(Tensor([44739243, 3, 4, 4],"float64"), kernel_size=list[3,3,], stride=list[1,1,], padding=list[0,0,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([44739243, 3, 4, 4],"float64"), kernel_size=list[3,3,], stride=list[3,3,], padding=list[0,0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([44739243, 3, 4, 4],"float64"), kernel_size=list[3,3,], stride=list[3,3,], padding=list[0,0,0,0,], ceil_mode=True, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([44739243, 3, 4, 4],"float64"), kernel_size=list[3,3,], stride=tuple(1,1,), padding=list[0,0,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([44739243, 3, 4, 4],"float64"), kernel_size=list[3,3,], stride=tuple(1,1,), padding=tuple(0,0,), ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([48133, 528, 13, 13],"float32"), kernel_size=5, stride=3, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([49637, 512, 13, 13],"float32"), kernel_size=5, stride=3, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([512, 128, 256, 256],"float32"), kernel_size=tuple(2,2,), stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([52676, 104, 28, 28],"float16"), kernel_size=3, stride=2, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([52676, 104, 28, 28],"float32"), kernel_size=3, stride=2, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([5350, 256, 56, 56],"float32"), kernel_size=2, stride=2, padding="SAME", ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([5592406, 3, 16, 16],"float32"), kernel_size=2, stride=2, )
paddle.nn.functional.avg_pool2d(Tensor([56, 1198373, 8, 8],"float32"), kernel_size=2, stride=2, )
paddle.nn.functional.avg_pool2d(Tensor([56, 18725, 64, 64],"float32"), kernel_size=2, stride=2, )
paddle.nn.functional.avg_pool2d(Tensor([56, 299594, 16, 16],"float32"), kernel_size=2, stride=2, )
paddle.nn.functional.avg_pool2d(Tensor([56, 3, 1597831, 16],"float32"), kernel_size=2, stride=2, )
paddle.nn.functional.avg_pool2d(Tensor([56, 3, 16, 1597831],"float32"), kernel_size=2, stride=2, )
paddle.nn.functional.avg_pool2d(Tensor([56, 3, 3195661, 8],"float32"), kernel_size=2, stride=2, )
paddle.nn.functional.avg_pool2d(Tensor([56, 3, 32, 798916],"float32"), kernel_size=2, stride=2, )
paddle.nn.functional.avg_pool2d(Tensor([56, 3, 399458, 64],"float32"), kernel_size=2, stride=2, )
paddle.nn.functional.avg_pool2d(Tensor([56, 3, 4, 6391321],"float32"), kernel_size=2, stride=2, )
paddle.nn.functional.avg_pool2d(Tensor([56, 3, 6391321, 4],"float32"), kernel_size=2, stride=2, )
paddle.nn.functional.avg_pool2d(Tensor([56, 3, 64, 399458],"float32"), kernel_size=2, stride=2, )
paddle.nn.functional.avg_pool2d(Tensor([56, 3, 798916, 32],"float32"), kernel_size=2, stride=2, )
paddle.nn.functional.avg_pool2d(Tensor([56, 3, 8, 3195661],"float32"), kernel_size=2, stride=2, )
paddle.nn.functional.avg_pool2d(Tensor([56, 4793491, 4, 4],"float32"), kernel_size=2, stride=2, )
paddle.nn.functional.avg_pool2d(Tensor([56, 74899, 32, 32],"float32"), kernel_size=2, stride=2, )
paddle.nn.functional.avg_pool2d(Tensor([57066, 1536, 7, 7],"float16"), kernel_size=7, stride=1, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([57066, 1536, 7, 7],"float32"), kernel_size=7, stride=1, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 1024, 14, 2487],"float32"), kernel_size=2, stride=2, padding="SAME", ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 1024, 14, 4682],"float16"), kernel_size=2, stride=2, padding="SAME", ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 1024, 14, 4682],"float32"), kernel_size=2, stride=2, padding="SAME", ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 1024, 2487, 14],"float32"), kernel_size=2, stride=2, padding="SAME", ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 1024, 4682, 14],"float16"), kernel_size=2, stride=2, padding="SAME", ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 1024, 4682, 14],"float32"), kernel_size=2, stride=2, padding="SAME", ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 104, 23046, 28],"float16"), kernel_size=3, stride=2, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 104, 23046, 28],"float32"), kernel_size=3, stride=2, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 104, 28, 23046],"float16"), kernel_size=3, stride=2, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 104, 28, 23046],"float32"), kernel_size=3, stride=2, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 128, 64, 8192],"float16"), kernel_size=3, stride=2, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 128, 64, 8192],"float32"), kernel_size=3, stride=2, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 128, 8192, 64],"float16"), kernel_size=3, stride=2, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 128, 8192, 64],"float32"), kernel_size=3, stride=2, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 1369569, 7, 7],"float16"), kernel_size=7, stride=1, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 1369569, 7, 7],"float32"), kernel_size=7, stride=1, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 1536, 6242, 7],"float16"), kernel_size=7, stride=1, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 1536, 7, 6242],"float16"), kernel_size=7, stride=1, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 1536, 7, 6242],"float32"), kernel_size=7, stride=1, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 16384, 64, 64],"float16"), kernel_size=3, stride=2, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 16384, 64, 64],"float32"), kernel_size=3, stride=2, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 208, 14, 23046],"float16"), kernel_size=3, stride=2, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 208, 23046, 14],"float16"), kernel_size=3, stride=2, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 279621, 3, 80],"float16"), kernel_size=list[3,2,], stride=list[3,2,], padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 279621, 3, 80],"float32"), kernel_size=list[3,2,], stride=list[3,2,], padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 342393, 14, 14],"float16"), kernel_size=2, stride=2, padding="SAME", ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 342393, 14, 14],"float16"), kernel_size=3, stride=2, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 342393, 14, 14],"float32"), kernel_size=2, stride=2, padding="SAME", ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 512, 1639, 80],"float16"), kernel_size=list[3,2,], stride=list[3,2,], padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 512, 1639, 80],"float32"), kernel_size=list[3,2,], stride=list[3,2,], padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 512, 3, 43691],"float16"), kernel_size=list[3,2,], stride=list[3,2,], padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 512, 3, 43691],"float32"), kernel_size=list[3,2,], stride=list[3,2,], padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 85599, 28, 28],"float16"), kernel_size=3, stride=2, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 85599, 28, 28],"float32"), kernel_size=3, stride=2, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([65536, 1024, 8, 8],"float32"), kernel_size=tuple(2,2,), stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([699051, 3, 32, 32],"float64"), kernel_size=list[2,2,], stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([699051, 3, 32, 32],"float64"), kernel_size=list[3,3,], stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([8, 2236963, 3, 80],"float32"), kernel_size=list[2,2,], stride=list[2,2,], padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([8, 512, 13108, 80],"float32"), kernel_size=list[2,2,], stride=list[2,2,], padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([8, 512, 3, 349526],"float32"), kernel_size=list[2,2,], stride=list[2,2,], padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([8192, 128, 64, 64],"float16"), kernel_size=3, stride=2, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([8192, 128, 64, 64],"float32"), kernel_size=3, stride=2, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([8192, 128, 64, 64],"float32"), kernel_size=tuple(2,2,), stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([83887, 128, 20, 20],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([89478486, 3, 4, 4],"float16"), kernel_size=list[3,3,], stride=list[3,3,], padding=list[0,0,0,0,], ceil_mode=True, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([89478486, 3, 4, 4],"float32"), kernel_size=2, stride=2, )
paddle.nn.functional.avg_pool2d(x=Tensor([1398102, 3, 32, 32],"float32"), kernel_size=list[2,2,], )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 1048577, 32, 32],"float64"), kernel_size=list[2,2,], )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 1048577, 32, 32],"float64"), kernel_size=list[3,3,], )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 134217729, 4, 4],"float16"), kernel_size=list[3,3,], stride=list[3,3,], padding=list[0,0,], ceil_mode=True, exclusive=False, )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 2097152, 32, 32],"float32"), kernel_size=list[2,2,], )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 3, 11184811, 32],"float64"), kernel_size=list[2,2,], )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 3, 11184811, 32],"float64"), kernel_size=list[3,3,], )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 3, 178956971, 4],"float16"), kernel_size=list[3,3,], stride=list[3,3,], padding=list[0,0,], ceil_mode=True, exclusive=False, )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 3, 22369622, 32],"float32"), kernel_size=list[2,2,], )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 3, 32, 11184811],"float64"), kernel_size=list[2,2,], )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 3, 32, 11184811],"float64"), kernel_size=list[3,3,], )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 3, 32, 22369622],"float32"), kernel_size=list[2,2,], )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 3, 4, 178956971],"float16"), kernel_size=list[3,3,], stride=list[3,3,], padding=list[0,0,], ceil_mode=True, exclusive=False, )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 3, 4, 89478486],"float64"), kernel_size=list[3,3,], stride=list[1,1,], padding=list[0,0,], )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 3, 4, 89478486],"float64"), kernel_size=list[3,3,], stride=list[3,3,], padding=list[0,0,0,0,], ceil_mode=False, exclusive=False, )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 3, 4, 89478486],"float64"), kernel_size=list[3,3,], stride=list[3,3,], padding=list[0,0,], ceil_mode=True, exclusive=False, )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 3, 4, 89478486],"float64"), kernel_size=list[3,3,], stride=tuple(1,1,), padding=list[0,0,], )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 3, 4, 89478486],"float64"), kernel_size=list[3,3,], stride=tuple(1,1,), padding=tuple(0,0,), )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 3, 89478486, 4],"float64"), kernel_size=list[3,3,], stride=list[1,1,], padding=list[0,0,], )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 3, 89478486, 4],"float64"), kernel_size=list[3,3,], stride=list[3,3,], padding=list[0,0,0,0,], ceil_mode=False, exclusive=False, )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 3, 89478486, 4],"float64"), kernel_size=list[3,3,], stride=list[3,3,], padding=list[0,0,], ceil_mode=True, exclusive=False, )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 3, 89478486, 4],"float64"), kernel_size=list[3,3,], stride=tuple(1,1,), padding=list[0,0,], )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 3, 89478486, 4],"float64"), kernel_size=list[3,3,], stride=tuple(1,1,), padding=tuple(0,0,), )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 67108865, 4, 4],"float64"), kernel_size=list[3,3,], stride=list[1,1,], padding=list[0,0,], )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 67108865, 4, 4],"float64"), kernel_size=list[3,3,], stride=list[3,3,], padding=list[0,0,0,0,], ceil_mode=False, exclusive=False, )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 67108865, 4, 4],"float64"), kernel_size=list[3,3,], stride=list[3,3,], padding=list[0,0,], ceil_mode=True, exclusive=False, )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 67108865, 4, 4],"float64"), kernel_size=list[3,3,], stride=tuple(1,1,), padding=list[0,0,], )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 67108865, 4, 4],"float64"), kernel_size=list[3,3,], stride=tuple(1,1,), padding=tuple(0,0,), )
paddle.nn.functional.avg_pool2d(x=Tensor([44739243, 3, 4, 4],"float64"), kernel_size=list[3,3,], stride=list[1,1,], padding=list[0,0,], )
paddle.nn.functional.avg_pool2d(x=Tensor([44739243, 3, 4, 4],"float64"), kernel_size=list[3,3,], stride=list[3,3,], padding=list[0,0,0,0,], ceil_mode=False, exclusive=False, )
paddle.nn.functional.avg_pool2d(x=Tensor([44739243, 3, 4, 4],"float64"), kernel_size=list[3,3,], stride=list[3,3,], padding=list[0,0,], ceil_mode=True, exclusive=False, )
paddle.nn.functional.avg_pool2d(x=Tensor([44739243, 3, 4, 4],"float64"), kernel_size=list[3,3,], stride=tuple(1,1,), padding=list[0,0,], )
paddle.nn.functional.avg_pool2d(x=Tensor([44739243, 3, 4, 4],"float64"), kernel_size=list[3,3,], stride=tuple(1,1,), padding=tuple(0,0,), )
paddle.nn.functional.avg_pool2d(x=Tensor([699051, 3, 32, 32],"float64"), kernel_size=list[2,2,], )
paddle.nn.functional.avg_pool2d(x=Tensor([699051, 3, 32, 32],"float64"), kernel_size=list[3,3,], )
paddle.nn.functional.avg_pool2d(x=Tensor([89478486, 3, 4, 4],"float16"), kernel_size=list[3,3,], stride=list[3,3,], padding=list[0,0,], ceil_mode=True, exclusive=False, )
paddle.nn.functional.avg_pool3d(Tensor([127827, 1, 3, 1600, 7],"float32"), kernel_size=tuple(1,1,5,), stride=1, )
paddle.nn.functional.avg_pool3d(Tensor([127827, 1, 7, 3, 1600],"float32"), kernel_size=tuple(5,1,1,), stride=1, )
paddle.nn.functional.avg_pool3d(Tensor([1398102, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=2, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([1398102, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([1398102, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,2,3,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([1398102, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([1398102, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([1398102, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([1398102, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([1398102, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,0,0,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([1398102, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,1,1,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([1398102, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=list[1,0,0,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([1398102, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=tuple(1,0,0,), ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([1398102, 8, 8, 8, 3],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NDHWC", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([1485483, 3, 8, 8, 8],"float32"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 11184811, 8, 8, 3],"float16"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NDHWC", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 2097153, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=2, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 2097153, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 2097153, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,2,3,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 2097153, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 2097153, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 2097153, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 2097153, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 2097153, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,0,0,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 2097153, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,1,1,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 2097153, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=list[1,0,0,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 2097153, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=tuple(1,0,0,), ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 2228225, 8, 8, 8],"float32"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 11184811, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=2, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 11184811, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 11184811, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[1,2,3,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 11184811, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 11184811, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 11184811, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 11184811, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 11184811, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,0,0,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 11184811, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,1,1,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 11184811, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=list[1,0,0,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 11184811, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=tuple(1,0,0,), ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 11184811, 8, 8],"float32"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 32, 32, 371371],"float32"), kernel_size=2, stride=2, padding="SAME", )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 32, 32, 371371],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 32, 32, 371371],"float32"), kernel_size=2, stride=2, padding=0, divisor_override=8, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 32, 32, 371371],"float32"), kernel_size=2, stride=2, padding=list[0,0,0,0,0,0,], divisor_override=8, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 32, 32, 371371],"float32"), kernel_size=2, stride=None, padding="SAME", ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 32, 32, 699051],"float32"), kernel_size=2, stride=2, padding="SAME", )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 32, 32, 699051],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 32, 32, 699051],"float32"), kernel_size=2, stride=2, padding=0, divisor_override=8, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 32, 32, 699051],"float32"), kernel_size=2, stride=2, padding=list[0,0,0,0,0,0,], divisor_override=8, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 32, 32, 699051],"float32"), kernel_size=2, stride=None, padding="SAME", ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 32, 371371, 32],"float32"), kernel_size=2, stride=2, padding="SAME", )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 32, 371371, 32],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 32, 371371, 32],"float32"), kernel_size=2, stride=2, padding=0, divisor_override=8, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 32, 371371, 32],"float32"), kernel_size=2, stride=2, padding=list[0,0,0,0,0,0,], divisor_override=8, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 32, 371371, 32],"float32"), kernel_size=2, stride=None, padding="SAME", ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 32, 699051, 32],"float32"), kernel_size=2, stride=2, padding="SAME", )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 32, 699051, 32],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 32, 699051, 32],"float32"), kernel_size=2, stride=2, padding=0, divisor_override=8, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 32, 699051, 32],"float32"), kernel_size=2, stride=2, padding=list[0,0,0,0,0,0,], divisor_override=8, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 32, 699051, 32],"float32"), kernel_size=2, stride=None, padding="SAME", ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 371371, 32, 32],"float32"), kernel_size=2, stride=2, padding="SAME", )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 371371, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 371371, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, divisor_override=8, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 371371, 32, 32],"float32"), kernel_size=2, stride=2, padding=list[0,0,0,0,0,0,], divisor_override=8, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 371371, 32, 32],"float32"), kernel_size=2, stride=None, padding="SAME", ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 5592406, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=2, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 5592406, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 5592406, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,2,3,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 5592406, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 5592406, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 5592406, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 5592406, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 5592406, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,0,0,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 5592406, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,1,1,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 5592406, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=list[1,0,0,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 5592406, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=tuple(1,0,0,), ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 5941931, 8, 8],"float32"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 699051, 32, 32],"float32"), kernel_size=2, stride=2, padding="SAME", )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 699051, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 699051, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, divisor_override=8, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 699051, 32, 32],"float32"), kernel_size=2, stride=2, padding=list[0,0,0,0,0,0,], divisor_override=8, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 699051, 32, 32],"float32"), kernel_size=2, stride=None, padding="SAME", ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 8, 11184811],"float16"), kernel_size=list[3,3,3,], stride=2, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 8, 11184811],"float16"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 8, 11184811],"float16"), kernel_size=list[3,3,3,], stride=list[1,2,3,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 8, 11184811],"float16"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 8, 11184811],"float16"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 8, 11184811],"float16"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 8, 11184811],"float16"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 8, 11184811],"float16"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,0,0,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 8, 11184811],"float16"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,1,1,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 8, 11184811],"float16"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=list[1,0,0,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 8, 11184811],"float16"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=tuple(1,0,0,), ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 8, 11184811],"float32"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 8, 5592406],"float64"), kernel_size=list[3,3,3,], stride=2, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 8, 5592406],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 8, 5592406],"float64"), kernel_size=list[3,3,3,], stride=list[1,2,3,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 8, 5592406],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 8, 5592406],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 8, 5592406],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 8, 5592406],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 8, 5592406],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,0,0,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 8, 5592406],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,1,1,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 8, 5592406],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=list[1,0,0,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 8, 5592406],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=tuple(1,0,0,), ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 8, 5941931],"float32"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 34817, 32, 32, 32],"float32"), kernel_size=2, stride=2, padding="SAME", )
paddle.nn.functional.avg_pool3d(Tensor([2, 34817, 32, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 34817, 32, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, divisor_override=8, )
paddle.nn.functional.avg_pool3d(Tensor([2, 34817, 32, 32, 32],"float32"), kernel_size=2, stride=2, padding=list[0,0,0,0,0,0,], divisor_override=8, )
paddle.nn.functional.avg_pool3d(Tensor([2, 34817, 32, 32, 32],"float32"), kernel_size=2, stride=None, padding="SAME", ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 4194304, 8, 8, 8],"float32"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 4194305, 8, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=2, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 4194305, 8, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 4194305, 8, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[1,2,3,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 4194305, 8, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 4194305, 8, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 4194305, 8, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 4194305, 8, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 4194305, 8, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,0,0,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 4194305, 8, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,1,1,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 4194305, 8, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=list[1,0,0,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 4194305, 8, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=tuple(1,0,0,), ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 5592406, 8, 8, 3],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NDHWC", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 65536, 32, 32, 32],"float32"), kernel_size=2, stride=2, padding="SAME", )
paddle.nn.functional.avg_pool3d(Tensor([2, 65536, 32, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 65536, 32, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, divisor_override=8, )
paddle.nn.functional.avg_pool3d(Tensor([2, 65536, 32, 32, 32],"float32"), kernel_size=2, stride=2, padding=list[0,0,0,0,0,0,], divisor_override=8, )
paddle.nn.functional.avg_pool3d(Tensor([2, 65536, 32, 32, 32],"float32"), kernel_size=2, stride=None, padding="SAME", ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 8, 8, 11184811, 3],"float16"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NDHWC", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 8, 8, 5592406, 3],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NDHWC", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 8, 8, 8, 2097153],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NDHWC", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 8, 8, 8, 4194305],"float16"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NDHWC", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([203724, 1, 40, 40, 7],"float32"), kernel_size=tuple(1,1,5,), stride=1, )
paddle.nn.functional.avg_pool3d(Tensor([203724, 1, 7, 40, 40],"float32"), kernel_size=tuple(5,1,1,), stride=1, )
paddle.nn.functional.avg_pool3d(Tensor([23211, 3, 32, 32, 32],"float32"), kernel_size=2, stride=2, padding="SAME", )
paddle.nn.functional.avg_pool3d(Tensor([23211, 3, 32, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([23211, 3, 32, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, divisor_override=8, )
paddle.nn.functional.avg_pool3d(Tensor([23211, 3, 32, 32, 32],"float32"), kernel_size=2, stride=2, padding=list[0,0,0,0,0,0,], divisor_override=8, )
paddle.nn.functional.avg_pool3d(Tensor([23211, 3, 32, 32, 32],"float32"), kernel_size=2, stride=None, padding="SAME", ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2796203, 3, 8, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=2, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2796203, 3, 8, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2796203, 3, 8, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[1,2,3,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2796203, 3, 8, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2796203, 3, 8, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2796203, 3, 8, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2796203, 3, 8, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2796203, 3, 8, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,0,0,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2796203, 3, 8, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,1,1,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2796203, 3, 8, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=list[1,0,0,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2796203, 3, 8, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=tuple(1,0,0,), ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2796203, 3, 8, 8, 8],"float32"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2796203, 8, 8, 8, 3],"float16"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NDHWC", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([3, 1, 127827, 1600, 7],"float32"), kernel_size=tuple(1,1,5,), stride=1, )
paddle.nn.functional.avg_pool3d(Tensor([3, 1, 158452, 3, 1600],"float32"), kernel_size=tuple(5,1,1,), stride=1, )
paddle.nn.functional.avg_pool3d(Tensor([3, 1, 2716312, 40, 7],"float32"), kernel_size=tuple(1,1,5,), stride=1, )
paddle.nn.functional.avg_pool3d(Tensor([3, 1, 3, 1600, 158452],"float32"), kernel_size=tuple(1,1,5,), stride=1, )
paddle.nn.functional.avg_pool3d(Tensor([3, 1, 40, 40, 475355],"float32"), kernel_size=tuple(1,1,5,), stride=1, )
paddle.nn.functional.avg_pool3d(Tensor([3, 1, 475355, 40, 40],"float32"), kernel_size=tuple(5,1,1,), stride=1, )
paddle.nn.functional.avg_pool3d(Tensor([3, 1, 5113057, 40, 7],"float32"), kernel_size=tuple(1,1,5,), stride=1, )
paddle.nn.functional.avg_pool3d(Tensor([3, 1, 67908, 1600, 7],"float32"), kernel_size=tuple(1,1,5,), stride=1, )
paddle.nn.functional.avg_pool3d(Tensor([3, 1, 7, 127827, 1600],"float32"), kernel_size=tuple(5,1,1,), stride=1, )
paddle.nn.functional.avg_pool3d(Tensor([3, 1, 7, 3, 36217483],"float32"), kernel_size=tuple(5,1,1,), stride=1, )
paddle.nn.functional.avg_pool3d(Tensor([3, 1, 7, 3, 68174085],"float32"), kernel_size=tuple(5,1,1,), stride=1, )
paddle.nn.functional.avg_pool3d(Tensor([3, 1, 7, 40, 2716312],"float32"), kernel_size=tuple(5,1,1,), stride=1, )
paddle.nn.functional.avg_pool3d(Tensor([3, 1, 7, 40, 5113057],"float32"), kernel_size=tuple(5,1,1,), stride=1, )
paddle.nn.functional.avg_pool3d(Tensor([3, 1, 7, 67908, 1600],"float32"), kernel_size=tuple(5,1,1,), stride=1, )
paddle.nn.functional.avg_pool3d(Tensor([3, 127827, 40, 40, 7],"float32"), kernel_size=tuple(1,1,5,), stride=1, )
paddle.nn.functional.avg_pool3d(Tensor([3, 127827, 7, 40, 40],"float32"), kernel_size=tuple(5,1,1,), stride=1, )
paddle.nn.functional.avg_pool3d(Tensor([3, 22636, 3, 1600, 7],"float32"), kernel_size=tuple(1,1,5,), stride=1, )
paddle.nn.functional.avg_pool3d(Tensor([3, 22636, 7, 3, 1600],"float32"), kernel_size=tuple(5,1,1,), stride=1, )
paddle.nn.functional.avg_pool3d(Tensor([3, 42609, 3, 1600, 7],"float32"), kernel_size=tuple(1,1,5,), stride=1, )
paddle.nn.functional.avg_pool3d(Tensor([3, 42609, 7, 3, 1600],"float32"), kernel_size=tuple(5,1,1,), stride=1, )
paddle.nn.functional.avg_pool3d(Tensor([3, 67908, 40, 40, 7],"float32"), kernel_size=tuple(1,1,5,), stride=1, )
paddle.nn.functional.avg_pool3d(Tensor([3, 67908, 7, 40, 40],"float32"), kernel_size=tuple(5,1,1,), stride=1, )
paddle.nn.functional.avg_pool3d(Tensor([383480, 1, 40, 40, 7],"float32"), kernel_size=tuple(1,1,5,), stride=1, )
paddle.nn.functional.avg_pool3d(Tensor([383480, 1, 7, 40, 40],"float32"), kernel_size=tuple(5,1,1,), stride=1, )
paddle.nn.functional.avg_pool3d(Tensor([43691, 3, 32, 32, 32],"float32"), kernel_size=2, stride=2, padding="SAME", )
paddle.nn.functional.avg_pool3d(Tensor([43691, 3, 32, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([43691, 3, 32, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, divisor_override=8, )
paddle.nn.functional.avg_pool3d(Tensor([43691, 3, 32, 32, 32],"float32"), kernel_size=2, stride=2, padding=list[0,0,0,0,0,0,], divisor_override=8, )
paddle.nn.functional.avg_pool3d(Tensor([43691, 3, 32, 32, 32],"float32"), kernel_size=2, stride=None, padding="SAME", ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([67908, 1, 3, 1600, 7],"float32"), kernel_size=tuple(1,1,5,), stride=1, )
paddle.nn.functional.avg_pool3d(Tensor([67908, 1, 7, 3, 1600],"float32"), kernel_size=tuple(5,1,1,), stride=1, )
paddle.nn.functional.avg_pool3d(x=Tensor([10700, 2048, 4, 7, 7],"float32"), kernel_size=list[4,7,7,], stride=1, data_format="NCDHW", )
paddle.nn.functional.avg_pool3d(x=Tensor([10700, 256, 32, 7, 7],"float32"), kernel_size=list[32,7,7,], stride=1, data_format="NCDHW", )
paddle.nn.functional.avg_pool3d(x=Tensor([1398102, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=2, padding=1, exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([1398102, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], )
paddle.nn.functional.avg_pool3d(x=Tensor([1398102, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,2,3,], padding=list[0,0,0,], exclusive=False, )
paddle.nn.functional.avg_pool3d(x=Tensor([1398102, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], )
paddle.nn.functional.avg_pool3d(x=Tensor([1398102, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([1398102, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=1, exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([1398102, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[0,0,0,], exclusive=False, )
paddle.nn.functional.avg_pool3d(x=Tensor([1398102, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,0,0,], exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([1398102, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,1,1,], exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([1398102, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=list[1,0,0,], exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([1398102, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=tuple(1,0,0,), exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([1398102, 8, 8, 8, 3],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NDHWC", exclusive=False, )
paddle.nn.functional.avg_pool3d(x=Tensor([1485483, 3, 8, 8, 8],"float32"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 11184811, 8, 8, 3],"float16"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NDHWC", exclusive=False, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 2097153, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=2, padding=1, exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 2097153, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 2097153, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,2,3,], padding=list[0,0,0,], exclusive=False, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 2097153, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 2097153, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 2097153, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=1, exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 2097153, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[0,0,0,], exclusive=False, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 2097153, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,0,0,], exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 2097153, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,1,1,], exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 2097153, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=list[1,0,0,], exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 2097153, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=tuple(1,0,0,), exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 2228225, 8, 8, 8],"float32"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 11184811, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=2, padding=1, exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 11184811, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 11184811, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[1,2,3,], padding=list[0,0,0,], exclusive=False, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 11184811, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 11184811, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 11184811, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=1, exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 11184811, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[0,0,0,], exclusive=False, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 11184811, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,0,0,], exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 11184811, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,1,1,], exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 11184811, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=list[1,0,0,], exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 11184811, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=tuple(1,0,0,), exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 11184811, 8, 8],"float32"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 5592406, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=2, padding=1, exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 5592406, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 5592406, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,2,3,], padding=list[0,0,0,], exclusive=False, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 5592406, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 5592406, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 5592406, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=1, exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 5592406, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[0,0,0,], exclusive=False, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 5592406, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,0,0,], exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 5592406, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,1,1,], exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 5592406, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=list[1,0,0,], exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 5592406, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=tuple(1,0,0,), exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 5941931, 8, 8],"float32"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 8, 11184811],"float16"), kernel_size=list[3,3,3,], stride=2, padding=1, exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 8, 11184811],"float16"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 8, 11184811],"float16"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 8, 11184811],"float16"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 8, 11184811],"float16"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=1, exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 8, 11184811],"float16"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[0,0,0,], exclusive=False, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 8, 11184811],"float16"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,1,1,], exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 8, 11184811],"float16"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=list[1,0,0,], exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 8, 11184811],"float16"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=tuple(1,0,0,), exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 8, 11184811],"float32"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 8, 5592406],"float64"), kernel_size=list[3,3,3,], stride=2, padding=1, exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 8, 5592406],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 8, 5592406],"float64"), kernel_size=list[3,3,3,], stride=list[1,2,3,], padding=list[0,0,0,], exclusive=False, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 8, 5592406],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 8, 5592406],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 8, 5592406],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=1, exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 8, 5592406],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[0,0,0,], exclusive=False, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 8, 5592406],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,0,0,], exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 8, 5592406],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,1,1,], exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 8, 5592406],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=list[1,0,0,], exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 8, 5592406],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=tuple(1,0,0,), exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 8, 5941931],"float32"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 4194304, 8, 8, 8],"float32"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 4194305, 8, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=2, padding=1, exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 4194305, 8, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 4194305, 8, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[1,2,3,], padding=list[0,0,0,], exclusive=False, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 4194305, 8, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 4194305, 8, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 4194305, 8, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=1, exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 4194305, 8, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[0,0,0,], exclusive=False, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 4194305, 8, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,0,0,], exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 4194305, 8, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,1,1,], exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 4194305, 8, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=list[1,0,0,], exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 4194305, 8, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=tuple(1,0,0,), exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 5592406, 8, 8, 3],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NDHWC", exclusive=False, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 8, 8, 11184811, 3],"float16"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NDHWC", exclusive=False, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 8, 8, 5592406, 3],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NDHWC", exclusive=False, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 8, 8, 8, 2097153],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NDHWC", exclusive=False, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 8, 8, 8, 4194305],"float16"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NDHWC", exclusive=False, )
paddle.nn.functional.avg_pool3d(x=Tensor([2796203, 3, 8, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=2, padding=1, exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2796203, 3, 8, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], )
paddle.nn.functional.avg_pool3d(x=Tensor([2796203, 3, 8, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[1,2,3,], padding=list[0,0,0,], exclusive=False, )
paddle.nn.functional.avg_pool3d(x=Tensor([2796203, 3, 8, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], )
paddle.nn.functional.avg_pool3d(x=Tensor([2796203, 3, 8, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2796203, 3, 8, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=1, exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2796203, 3, 8, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[0,0,0,], exclusive=False, )
paddle.nn.functional.avg_pool3d(x=Tensor([2796203, 3, 8, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,0,0,], exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2796203, 3, 8, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,1,1,], exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2796203, 3, 8, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=list[1,0,0,], exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2796203, 3, 8, 8, 8],"float16"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=tuple(1,0,0,), exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2796203, 3, 8, 8, 8],"float32"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], )
paddle.nn.functional.avg_pool3d(x=Tensor([2796203, 8, 8, 8, 3],"float16"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NDHWC", exclusive=False, )
paddle.nn.functional.avg_pool3d(x=Tensor([5685, 2048, 4, 7, 7],"float32"), kernel_size=list[4,7,7,], stride=1, data_format="NCDHW", )
paddle.nn.functional.avg_pool3d(x=Tensor([5685, 256, 32, 7, 7],"float32"), kernel_size=list[32,7,7,], stride=1, data_format="NCDHW", )
paddle.nn.functional.avg_pool3d(x=Tensor([8, 1455167, 4, 7, 7],"float32"), kernel_size=list[4,7,7,], stride=1, data_format="NCDHW", )
paddle.nn.functional.avg_pool3d(x=Tensor([8, 181896, 32, 7, 7],"float32"), kernel_size=list[32,7,7,], stride=1, data_format="NCDHW", )
paddle.nn.functional.avg_pool3d(x=Tensor([8, 2048, 2843, 7, 7],"float32"), kernel_size=list[4,7,7,], stride=1, data_format="NCDHW", )
paddle.nn.functional.avg_pool3d(x=Tensor([8, 2048, 4, 4974, 7],"float32"), kernel_size=list[4,7,7,], stride=1, data_format="NCDHW", )
paddle.nn.functional.avg_pool3d(x=Tensor([8, 2048, 4, 7, 4974],"float32"), kernel_size=list[4,7,7,], stride=1, data_format="NCDHW", )
paddle.nn.functional.avg_pool3d(x=Tensor([8, 2048, 4, 7, 9363],"float32"), kernel_size=list[4,7,7,], stride=1, data_format="NCDHW", )
paddle.nn.functional.avg_pool3d(x=Tensor([8, 2048, 4, 9363, 7],"float32"), kernel_size=list[4,7,7,], stride=1, data_format="NCDHW", )
paddle.nn.functional.avg_pool3d(x=Tensor([8, 2048, 5350, 7, 7],"float32"), kernel_size=list[4,7,7,], stride=1, data_format="NCDHW", )
paddle.nn.functional.avg_pool3d(x=Tensor([8, 256, 22737, 7, 7],"float32"), kernel_size=list[32,7,7,], stride=1, data_format="NCDHW", )
paddle.nn.functional.avg_pool3d(x=Tensor([8, 256, 32, 4974, 7],"float32"), kernel_size=list[32,7,7,], stride=1, data_format="NCDHW", )
paddle.nn.functional.avg_pool3d(x=Tensor([8, 256, 32, 7, 4974],"float32"), kernel_size=list[32,7,7,], stride=1, data_format="NCDHW", )
paddle.nn.functional.avg_pool3d(x=Tensor([8, 256, 32, 7, 9363],"float32"), kernel_size=list[32,7,7,], stride=1, data_format="NCDHW", )
paddle.nn.functional.avg_pool3d(x=Tensor([8, 256, 32, 9363, 7],"float32"), kernel_size=list[32,7,7,], stride=1, data_format="NCDHW", )
paddle.nn.functional.avg_pool3d(x=Tensor([8, 256, 42800, 7, 7],"float32"), kernel_size=list[32,7,7,], stride=1, data_format="NCDHW", )
paddle.nn.functional.avg_pool3d(x=Tensor([8, 2739138, 4, 7, 7],"float32"), kernel_size=list[4,7,7,], stride=1, data_format="NCDHW", )
paddle.nn.functional.avg_pool3d(x=Tensor([8, 342393, 32, 7, 7],"float32"), kernel_size=list[32,7,7,], stride=1, data_format="NCDHW", )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,2,1,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,2,1,], exclusive=True, )
paddle.nn.functional.class_center_sample(Tensor([2294967295],"int32"), 10, 8, )
paddle.nn.functional.class_center_sample(Tensor([4294967295],"int32"), 10, 8, )
paddle.nn.functional.class_center_sample(Tensor([4294967295],"int32"), 20, 6, )
paddle.nn.functional.class_center_sample(Tensor([4294967295],"int32"), 20, 8, )
paddle.nn.functional.class_center_sample(Tensor([4294967295],"int32"), num_classes=10, num_samples=6, group=None, )
paddle.nn.functional.lp_pool1d(Tensor([2, 3, 380283564],"float32"), 7.0, 2, None, 1, True, "NCL", None, )
paddle.nn.functional.lp_pool1d(Tensor([2, 3, 380283564],"float32"), norm_type=7, kernel_size=2, stride=2, padding=list[1,], ceil_mode=True, )
paddle.nn.functional.lp_pool1d(Tensor([2, 3, 715827883],"float16"), 5.0, 5, 3, 0, False, "NCL", None, )
paddle.nn.functional.lp_pool1d(Tensor([2, 3, 715827883],"float16"), norm_type=5, kernel_size=5, stride=3, padding=list[0,], )
paddle.nn.functional.lp_pool1d(Tensor([2, 32, 35651585],"float32"), 7.0, 2, None, 1, False, "NLC", None, )
paddle.nn.functional.lp_pool1d(Tensor([2, 32, 35651585],"float32"), norm_type=7, kernel_size=2, stride=2, padding=list[1,], ceil_mode=True, data_format="NLC", )
paddle.nn.functional.lp_pool1d(Tensor([2, 33554433, 32],"float64"), 5.0, 5, 3, 0, False, "NCL", None, )
paddle.nn.functional.lp_pool1d(Tensor([2, 35651585, 32],"float32"), 7.0, 2, None, 1, True, "NCL", None, )
paddle.nn.functional.lp_pool1d(Tensor([2, 35651585, 32],"float32"), norm_type=7, kernel_size=2, stride=2, padding=list[1,], ceil_mode=True, )
paddle.nn.functional.lp_pool1d(Tensor([2, 380283564, 3],"float32"), 7.0, 2, None, 1, False, "NLC", None, )
paddle.nn.functional.lp_pool1d(Tensor([2, 380283564, 3],"float32"), norm_type=7, kernel_size=2, stride=2, padding=list[1,], ceil_mode=True, data_format="NLC", )
paddle.nn.functional.lp_pool1d(Tensor([2, 67108864, 32],"float16"), 5.0, 5, 3, 0, False, "NCL", None, )
paddle.nn.functional.lp_pool1d(Tensor([2, 67108864, 32],"float16"), norm_type=5, kernel_size=5, stride=3, padding=list[0,], )
paddle.nn.functional.lp_pool1d(Tensor([2, 67108865, 32],"float16"), 5.0, 5, 3, 0, False, "NCL", None, )
paddle.nn.functional.lp_pool1d(Tensor([2, 67108865, 32],"float16"), norm_type=5, kernel_size=5, stride=3, padding=list[0,], )
paddle.nn.functional.lp_pool1d(Tensor([22369622, 3, 32],"float64"), 5.0, 5, 3, 0, False, "NCL", None, )
paddle.nn.functional.lp_pool1d(Tensor([23767723, 3, 32],"float32"), 7.0, 2, None, 1, True, "NCL", None, )
paddle.nn.functional.lp_pool1d(Tensor([23767723, 3, 32],"float32"), norm_type=7, kernel_size=2, stride=2, padding=list[1,], ceil_mode=True, )
paddle.nn.functional.lp_pool1d(Tensor([23767723, 32, 3],"float32"), 7.0, 2, None, 1, False, "NLC", None, )
paddle.nn.functional.lp_pool1d(Tensor([23767723, 32, 3],"float32"), norm_type=7, kernel_size=2, stride=2, padding=list[1,], ceil_mode=True, data_format="NLC", )
paddle.nn.functional.lp_pool1d(Tensor([44739243, 3, 32],"float16"), 5.0, 5, 3, 0, False, "NCL", None, )
paddle.nn.functional.lp_pool1d(Tensor([44739243, 3, 32],"float16"), norm_type=5, kernel_size=5, stride=3, padding=list[0,], )
paddle.nn.functional.lp_pool2d(Tensor([1398102, 3, 32, 32],"float16"), 2, kernel_size=3, stride=2, ceil_mode=False, )
paddle.nn.functional.lp_pool2d(Tensor([1398102, 3, 32, 32],"float16"), norm_type=2.0, kernel_size=3, stride=2, padding=0, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([1398102, 3, 32, 32],"float32"), -math.inf, kernel_size=2, stride=2, ceil_mode=False, )
paddle.nn.functional.lp_pool2d(Tensor([1398102, 3, 32, 32],"float32"), 2, kernel_size=2, stride=None, ceil_mode=False, )
paddle.nn.functional.lp_pool2d(Tensor([1398102, 3, 32, 32],"float32"), 2, kernel_size=5, stride=3, ceil_mode=True, )
paddle.nn.functional.lp_pool2d(Tensor([1398102, 3, 32, 32],"float32"), math.inf, kernel_size=list[2,4,], stride=2, ceil_mode=False, )
paddle.nn.functional.lp_pool2d(Tensor([1398102, 3, 32, 32],"float32"), norm_type=-math.inf, kernel_size=2, stride=2, padding=0, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([1398102, 3, 32, 32],"float32"), norm_type=2.0, kernel_size=2, stride=2, padding=0, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([1398102, 3, 32, 32],"float32"), norm_type=2.0, kernel_size=5, stride=3, padding=0, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([1398102, 3, 32, 32],"float32"), norm_type=math.inf, kernel_size=list[2,4,], stride=2, padding=0, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([1398102, 32, 32, 3],"float32"), 2, kernel_size=2, stride=2, ceil_mode=False, data_format="NHWC", )
paddle.nn.functional.lp_pool2d(Tensor([1398102, 32, 32, 3],"float32"), norm_type=2.0, kernel_size=2, stride=list[2,2,], padding=0, ceil_mode=False, data_format="NHWC", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([2, 1048577, 32, 32],"float64"), 2, kernel_size=5, stride=3, ceil_mode=False, )
paddle.nn.functional.lp_pool2d(Tensor([2, 1048577, 32, 32],"float64"), norm_type=2.0, kernel_size=5, stride=3, padding=0, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([2, 2097152, 32, 32],"float16"), 2, kernel_size=3, stride=2, ceil_mode=False, )
paddle.nn.functional.lp_pool2d(Tensor([2, 2097152, 32, 32],"float16"), norm_type=2.0, kernel_size=3, stride=2, padding=0, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([2, 2097152, 32, 32],"float32"), -math.inf, kernel_size=2, stride=2, ceil_mode=False, )
paddle.nn.functional.lp_pool2d(Tensor([2, 2097152, 32, 32],"float32"), 2, kernel_size=2, stride=None, ceil_mode=False, )
paddle.nn.functional.lp_pool2d(Tensor([2, 2097152, 32, 32],"float32"), 2, kernel_size=5, stride=3, ceil_mode=True, )
paddle.nn.functional.lp_pool2d(Tensor([2, 2097152, 32, 32],"float32"), math.inf, kernel_size=list[2,4,], stride=2, ceil_mode=False, )
paddle.nn.functional.lp_pool2d(Tensor([2, 2097152, 32, 32],"float32"), norm_type=-math.inf, kernel_size=2, stride=2, padding=0, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([2, 2097152, 32, 32],"float32"), norm_type=2.0, kernel_size=2, stride=2, padding=0, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([2, 2097152, 32, 32],"float32"), norm_type=2.0, kernel_size=5, stride=3, padding=0, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([2, 2097152, 32, 32],"float32"), norm_type=math.inf, kernel_size=list[2,4,], stride=2, padding=0, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([2, 22369622, 32, 3],"float32"), 2, kernel_size=2, stride=2, ceil_mode=False, data_format="NHWC", )
paddle.nn.functional.lp_pool2d(Tensor([2, 22369622, 32, 3],"float32"), norm_type=2.0, kernel_size=2, stride=list[2,2,], padding=0, ceil_mode=False, data_format="NHWC", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 11883862, 32],"float32"), 2, kernel_size=5, stride=3, ceil_mode=True, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 11883862, 32],"float32"), norm_type=2.0, kernel_size=5, stride=3, padding=0, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 22369622, 32],"float16"), 2, kernel_size=3, stride=2, ceil_mode=False, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 22369622, 32],"float16"), norm_type=2.0, kernel_size=3, stride=2, padding=0, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 22369622, 32],"float32"), -math.inf, kernel_size=2, stride=2, ceil_mode=False, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 22369622, 32],"float32"), 2, kernel_size=2, stride=None, ceil_mode=False, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 22369622, 32],"float32"), 2, kernel_size=5, stride=3, ceil_mode=True, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 22369622, 32],"float32"), math.inf, kernel_size=list[2,4,], stride=2, ceil_mode=False, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 22369622, 32],"float32"), norm_type=-math.inf, kernel_size=2, stride=2, padding=0, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 22369622, 32],"float32"), norm_type=2.0, kernel_size=2, stride=2, padding=0, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 22369622, 32],"float32"), norm_type=2.0, kernel_size=5, stride=3, padding=0, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 22369622, 32],"float32"), norm_type=math.inf, kernel_size=list[2,4,], stride=2, padding=0, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 11883862],"float32"), 2, kernel_size=5, stride=3, ceil_mode=True, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 11883862],"float32"), norm_type=2.0, kernel_size=5, stride=3, padding=0, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 22369622],"float16"), 2, kernel_size=3, stride=2, ceil_mode=False, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 22369622],"float16"), norm_type=2.0, kernel_size=3, stride=2, padding=0, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 22369622],"float32"), -math.inf, kernel_size=2, stride=2, ceil_mode=False, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 22369622],"float32"), 2, kernel_size=2, stride=None, ceil_mode=False, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 22369622],"float32"), 2, kernel_size=5, stride=3, ceil_mode=True, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 22369622],"float32"), math.inf, kernel_size=list[2,4,], stride=2, ceil_mode=False, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 22369622],"float32"), norm_type=-math.inf, kernel_size=2, stride=2, padding=0, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 22369622],"float32"), norm_type=2.0, kernel_size=2, stride=2, padding=0, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 22369622],"float32"), norm_type=2.0, kernel_size=5, stride=3, padding=0, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 22369622],"float32"), norm_type=math.inf, kernel_size=list[2,4,], stride=2, padding=0, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([2, 32, 22369622, 3],"float32"), 2, kernel_size=2, stride=2, ceil_mode=False, data_format="NHWC", )
paddle.nn.functional.lp_pool2d(Tensor([2, 32, 22369622, 3],"float32"), norm_type=2.0, kernel_size=2, stride=list[2,2,], padding=0, ceil_mode=False, data_format="NHWC", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([2, 32, 32, 2097152],"float32"), 2, kernel_size=2, stride=2, ceil_mode=False, data_format="NHWC", )
paddle.nn.functional.lp_pool2d(Tensor([2, 32, 32, 2097152],"float32"), norm_type=2.0, kernel_size=2, stride=list[2,2,], padding=0, ceil_mode=False, data_format="NHWC", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([699051, 3, 32, 32],"float64"), 2, kernel_size=5, stride=3, ceil_mode=False, )
paddle.nn.functional.lp_pool2d(Tensor([699051, 3, 32, 32],"float64"), norm_type=2.0, kernel_size=5, stride=3, padding=0, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool1d(Tensor([1, 1, 2147483649],"float64"), 2, 2, 0, True, False, None, )
paddle.nn.functional.max_pool1d(Tensor([1, 1073741825, 2],"float64"), 2, 2, 0, True, False, None, )
paddle.nn.functional.max_pool1d(Tensor([1, 134217729, 16],"float64"), 2, 2, 0, True, False, None, )
paddle.nn.functional.max_pool1d(Tensor([1, 134217729, 16],"float64"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool1d(Tensor([1, 142606337, 16],"float32"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool1d(Tensor([1, 3, 1431655765],"float32"), kernel_size=5, stride=5, padding=0, ceil_mode=True, return_mask=True, )
paddle.nn.functional.max_pool1d(Tensor([1, 380283564, 6],"float32"), kernel_size=5, stride=5, padding=0, ceil_mode=True, return_mask=True, )
paddle.nn.functional.max_pool1d(Tensor([1, 715827883, 6],"float32"), kernel_size=5, stride=5, padding=0, ceil_mode=True, return_mask=True, )
paddle.nn.functional.max_pool1d(Tensor([1073741825, 1, 2],"float64"), 2, 2, 0, True, False, None, )
paddle.nn.functional.max_pool1d(Tensor([126761188, 3, 6],"float32"), kernel_size=5, stride=5, padding=0, ceil_mode=True, return_mask=True, )
paddle.nn.functional.max_pool1d(Tensor([2, 35651585, 32],"float32"), kernel_size=2, stride=2, padding=0, return_mask=True, )
paddle.nn.functional.max_pool1d(Tensor([23767723, 3, 32],"float32"), kernel_size=2, stride=2, padding=0, return_mask=True, )
paddle.nn.functional.max_pool1d(Tensor([238609295, 3, 6],"float32"), kernel_size=5, stride=5, padding=0, ceil_mode=True, return_mask=True, )
paddle.nn.functional.max_pool1d(Tensor([44739243, 3, 16],"float64"), 2, 2, 0, True, False, None, )
paddle.nn.functional.max_pool1d(Tensor([44739243, 3, 16],"float64"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool1d(Tensor([47535446, 3, 16],"float32"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool1d(x=Tensor([1, 1, 2147483649],"float64"), kernel_size=2, stride=2, padding=0, return_mask=True, )
paddle.nn.functional.max_pool1d(x=Tensor([1, 1073741825, 2],"float64"), kernel_size=2, stride=2, padding=0, return_mask=True, )
paddle.nn.functional.max_pool1d(x=Tensor([1073741825, 1, 2],"float64"), kernel_size=2, stride=2, padding=0, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([1, 1, 1073741824, 4],"float32"), kernel_size=2, stride=2, padding=0, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 1, 1073741824, 4],"float32"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([1, 1, 4, 1073741824],"float32"), kernel_size=2, stride=2, padding=0, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 1, 4, 1073741824],"float32"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([1, 1, 4, 570425345],"float32"), kernel_size=2, stride=2, padding=0, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 1, 4, 570425345],"float32"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([1, 1, 456340276, 5],"float32"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([1, 1, 570425345, 4],"float32"), kernel_size=2, stride=2, padding=0, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 1, 570425345, 4],"float32"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([1, 1, 858993459, 5],"float32"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([1, 114085069, 4, 5],"float32"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([1, 119304648, 6, 6],"float32"), kernel_size=2, stride=2, padding=0, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([1, 142606337, 4, 4],"float32"), kernel_size=2, stride=2, padding=0, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 142606337, 4, 4],"float32"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([1, 2, 32, 67108864],"float32"), kernel_size=2, stride=2, padding=0, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 2, 67108864, 32],"float32"), kernel_size=2, stride=2, padding=0, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 214748365, 4, 5],"float32"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([1, 2228225, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 268435456, 4, 4],"float32"), kernel_size=2, stride=2, padding=0, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 268435456, 4, 4],"float32"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([1, 3, 238609295, 6],"float32"), kernel_size=2, stride=2, padding=0, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([1, 3, 6, 238609295],"float32"), kernel_size=2, stride=2, padding=0, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([1, 4194304, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 63380594, 6, 6],"float32"), kernel_size=2, stride=2, padding=0, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([1114113, 2, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([114085069, 1, 4, 5],"float32"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([1314652, 3, 33, 33],"float32"), kernel_size=5, stride=5, padding=0, ceil_mode=True, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([1398102, 3, 32, 32],"float32"), kernel_size=2, stride=None, padding="SAME", return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([142606337, 1, 4, 4],"float32"), kernel_size=2, stride=2, padding=0, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([142606337, 1, 4, 4],"float32"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([16, 16, 222823, 40],"float32"), kernel_size=2, stride=None, padding="SAME", return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 16, 40, 222823],"float32"), kernel_size=2, stride=None, padding="SAME", return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 32, 20, 222823],"float32"), kernel_size=2, stride=None, padding="SAME", return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 32, 222823, 20],"float32"), kernel_size=2, stride=None, padding="SAME", return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 1047614, 33, 33],"float32"), kernel_size=5, stride=5, padding=0, ceil_mode=True, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([2, 1114113, 32, 32],"float32"), kernel_size=2, stride=None, padding="SAME", return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([2, 1342178, 40, 40],"float16"), kernel_size=2, stride=None, padding=0, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 1342178, 40, 40],"float16"), kernel_size=4, stride=2, padding=2, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 1342178, 40, 40],"float16"), kernel_size=4, stride=None, padding=2, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 1342178, 40, 40],"float16"), kernel_size=tuple(2,4,), stride=None, padding=0, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 1971978, 33, 33],"float32"), kernel_size=5, stride=5, padding=0, ceil_mode=True, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([2, 2097152, 32, 32],"float32"), kernel_size=2, stride=None, padding="SAME", return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 21691755, 33],"float32"), kernel_size=5, stride=5, padding=0, ceil_mode=True, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 22369622, 32],"float32"), kernel_size=2, stride=None, padding="SAME", return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 32, 22369622],"float32"), kernel_size=2, stride=None, padding="SAME", return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 33, 21691755],"float32"), kernel_size=5, stride=5, padding=0, ceil_mode=True, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([2, 32, 32, 2097152],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, data_format="NHWC", )
paddle.nn.functional.max_pool2d(Tensor([2, 4, 13421773, 40],"float16"), kernel_size=2, stride=None, padding=0, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 4, 13421773, 40],"float16"), kernel_size=4, stride=2, padding=2, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 4, 13421773, 40],"float16"), kernel_size=4, stride=None, padding=2, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 4, 13421773, 40],"float16"), kernel_size=tuple(2,4,), stride=None, padding=0, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 4, 40, 13421773],"float16"), kernel_size=2, stride=None, padding=0, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 4, 40, 13421773],"float16"), kernel_size=4, stride=2, padding=2, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 4, 40, 13421773],"float16"), kernel_size=4, stride=None, padding=2, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 4, 40, 13421773],"float16"), kernel_size=tuple(2,4,), stride=None, padding=0, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2097152, 2, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([21126865, 3, 6, 6],"float32"), kernel_size=2, stride=2, padding=0, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([214748365, 1, 4, 5],"float32"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([268435456, 1, 4, 4],"float32"), kernel_size=2, stride=2, padding=0, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([268435456, 1, 4, 4],"float32"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([335545, 4, 40, 40],"float64"), kernel_size=2, stride=None, padding=0, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([335545, 4, 40, 40],"float64"), kernel_size=4, stride=2, padding=2, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([335545, 4, 40, 40],"float64"), kernel_size=4, stride=None, padding=2, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([335545, 4, 40, 40],"float64"), kernel_size=tuple(2,4,), stride=None, padding=0, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([377266, 32, 21, 9],"float32"), 2, 2, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([39768216, 3, 6, 6],"float32"), kernel_size=2, stride=2, padding=0, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([42519, 16, 86, 39],"float32"), 2, 2, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([64, 10630, 86, 39],"float32"), 2, 2, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([64, 16, 57134, 39],"float32"), 2, 2, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([64, 16, 86, 25910],"float32"), 2, 2, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([64, 188633, 21, 9],"float32"), 2, 2, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([64, 32, 123791, 9],"float32"), 2, 2, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([64, 32, 21, 53053],"float32"), 2, 2, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([64, 32, 43, 25910],"float32"), 2, 2, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([64, 32, 58638, 19],"float32"), 2, 2, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([64, 43638, 43, 19],"float32"), 2, 2, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([671089, 4, 40, 40],"float16"), kernel_size=2, stride=None, padding=0, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([671089, 4, 40, 40],"float16"), kernel_size=4, stride=2, padding=2, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([671089, 4, 40, 40],"float16"), kernel_size=4, stride=None, padding=2, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([671089, 4, 40, 40],"float16"), kernel_size=tuple(2,4,), stride=None, padding=0, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([698409, 3, 33, 33],"float32"), kernel_size=5, stride=5, padding=0, ceil_mode=True, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([742742, 3, 32, 32],"float32"), kernel_size=2, stride=None, padding="SAME", return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([87275, 32, 43, 19],"float32"), 2, 2, return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([1, 23767723, 4, 4, 6],"float32"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([1, 3, 4, 4, 89478486],"float16"), kernel_size=2, stride=2, padding=0, return_mask=True, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([1, 3, 4, 4, 89478486],"float16"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([1, 3, 4, 4, 89478486],"float32"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([1, 3, 59652324, 4, 6],"float16"), kernel_size=2, stride=2, padding=0, return_mask=True, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([1, 3, 59652324, 4, 6],"float16"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([1, 3, 59652324, 4, 6],"float32"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([1, 349205, 6, 33, 33],"float32"), kernel_size=5, stride=5, padding=0, ceil_mode=True, return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([1, 4, 4, 67108864, 4],"float32"), list[3,3,3,], stride=1, padding=list[0,0,0,], data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([1, 4, 4, 67108864, 4],"float32"), list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([1, 44739243, 4, 4, 6],"float16"), kernel_size=2, stride=2, padding=0, return_mask=True, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([1, 44739243, 4, 4, 6],"float16"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([1, 44739243, 4, 4, 6],"float32"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([1, 5, 6, 25352238, 3],"float32"), list[3,3,3,], stride=list[1,1,1,], padding=1, data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([1, 5, 6, 8, 9507090],"float32"), list[3,3,3,], stride=list[1,1,1,], padding=1, data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([1, 657326, 6, 33, 33],"float32"), kernel_size=5, stride=5, padding=0, ceil_mode=True, return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([1, 67108864, 4, 4, 4],"float32"), list[3,3,3,], stride=1, padding=list[0,0,0,], data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([1, 67108864, 4, 4, 4],"float32"), list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([14913081, 3, 4, 4, 6],"float16"), kernel_size=2, stride=2, padding=0, return_mask=True, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([14913081, 3, 4, 4, 6],"float16"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([14913081, 3, 4, 4, 6],"float32"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([174603, 2, 6, 33, 33],"float32"), kernel_size=5, stride=5, padding=0, ceil_mode=True, return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([2, 11362348, 7, 9, 3],"float32"), list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 32, 32, 371371],"float32"), kernel_size=2, stride=None, padding="SAME", return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 32, 32, 699051],"float32"), kernel_size=2, stride=None, padding="SAME", return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 32, 371371, 32],"float32"), kernel_size=2, stride=None, padding="SAME", return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 32, 699051, 32],"float32"), kernel_size=2, stride=None, padding="SAME", return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 371371, 32, 32],"float32"), kernel_size=2, stride=None, padding="SAME", return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 699051, 32, 32],"float32"), kernel_size=2, stride=None, padding="SAME", return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([2, 34817, 32, 32, 32],"float32"), kernel_size=2, stride=None, padding="SAME", return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([2, 65536, 32, 32, 32],"float32"), kernel_size=2, stride=None, padding="SAME", return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([23211, 3, 32, 32, 32],"float32"), kernel_size=2, stride=None, padding="SAME", return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([328663, 2, 6, 33, 33],"float32"), kernel_size=5, stride=5, padding=0, ceil_mode=True, return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([43691, 3, 32, 32, 32],"float32"), kernel_size=2, stride=None, padding="SAME", return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([7456541, 3, 4, 4, 6],"float64"), kernel_size=2, stride=2, padding=0, return_mask=True, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([7456541, 3, 4, 4, 6],"float64"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([7922575, 3, 4, 4, 6],"float32"), kernel_size=2, stride=2, return_mask=True, )
paddle.frac(Tensor([1431655765, 3],"int32"), )
paddle.frac(Tensor([2, 1073741825],"int64"), )
paddle.frac(Tensor([2, 2147483648],"int32"), )
paddle.frac(Tensor([715827883, 3],"int64"), )
paddle.sort(Tensor([1, 4294967295],"float16"), descending=True, )
paddle.sort(Tensor([1, 4294967295],"float32"), descending=True, )
paddle.sort(Tensor([2147483649],"float64"), )
paddle.sort(Tensor([2147483649],"float64"), 0, )
paddle.sort(Tensor([2147483649],"float64"), axis=0, )
paddle.sort(Tensor([4294967295],"bfloat16"), )
paddle.sort(Tensor([4294967295],"float16"), )
paddle.sort(Tensor([4294967295],"float32"), )
paddle.sort(Tensor([4294967295],"float32"), 0, )
paddle.sort(Tensor([4294967295],"int32"), )
paddle.nn.functional.conv1d(Tensor([1, 1024, 2228225],"float32"), Tensor([1024, 1024, 3],"float32"), bias=Tensor([1024],"float32"), padding=1, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 1024, 3000],"float32"), Tensor([1398102, 1024, 3],"float32"), bias=Tensor([1398102],"float32"), padding=1, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 128, 112],"float32"), Tensor([11184811, 128, 3],"float32"), bias=Tensor([11184811],"float32"), padding=1, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 128, 112],"float32"), Tensor([11184811, 128, 3],"float32"), bias=Tensor([11184811],"float32"), padding=3, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 128, 112],"float32"), Tensor([11184811, 128, 3],"float32"), bias=Tensor([11184811],"float32"), padding=5, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 128, 112],"float32"), Tensor([3050403, 128, 11],"float32"), bias=Tensor([3050403],"float32"), padding=15, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 128, 112],"float32"), Tensor([3050403, 128, 11],"float32"), bias=Tensor([3050403],"float32"), padding=25, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 128, 112],"float32"), Tensor([3050403, 128, 11],"float32"), bias=Tensor([3050403],"float32"), padding=5, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 128, 112],"float32"), Tensor([4793491, 128, 7],"float32"), bias=Tensor([4793491],"float32"), padding=15, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 128, 112],"float32"), Tensor([4793491, 128, 7],"float32"), bias=Tensor([4793491],"float32"), padding=3, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 128, 112],"float32"), Tensor([4793491, 128, 7],"float32"), bias=Tensor([4793491],"float32"), padding=9, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 128, 17825793],"float32"), Tensor([128, 128, 3],"float32"), bias=Tensor([128],"float32"), padding=1, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 128, 17825793],"float32"), Tensor([128, 128, 3],"float32"), bias=Tensor([128],"float32"), padding=3, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 128, 17825793],"float32"), Tensor([128, 128, 3],"float32"), bias=Tensor([128],"float32"), padding=5, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 1280, 3000],"float32"), Tensor([1118482, 1280, 3],"float32"), bias=Tensor([1118482],"float32"), padding=1, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 1280, 3000],"float32"), Tensor([1280, 1280, 2622],"float32"), bias=Tensor([1280],"float32"), padding=1, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 1280, 3355444],"float32"), Tensor([1280, 1280, 3],"float32"), bias=Tensor([1280],"float32"), padding=1, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 20, 7],"float32"), Tensor([30678338, 20, 7],"float32"), bias=Tensor([30678338],"float32"), padding=3, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 256, 28],"float32"), Tensor([1525202, 256, 11],"float32"), bias=Tensor([1525202],"float32"), padding=15, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 256, 28],"float32"), Tensor([1525202, 256, 11],"float32"), bias=Tensor([1525202],"float32"), padding=25, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 256, 28],"float32"), Tensor([1525202, 256, 11],"float32"), bias=Tensor([1525202],"float32"), padding=5, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 256, 28],"float32"), Tensor([2396746, 256, 7],"float32"), bias=Tensor([2396746],"float32"), padding=15, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 256, 28],"float32"), Tensor([2396746, 256, 7],"float32"), bias=Tensor([2396746],"float32"), padding=3, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 256, 28],"float32"), Tensor([2396746, 256, 7],"float32"), bias=Tensor([2396746],"float32"), padding=9, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 256, 28],"float32"), Tensor([5592406, 256, 3],"float32"), bias=Tensor([5592406],"float32"), padding=1, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 256, 28],"float32"), Tensor([5592406, 256, 3],"float32"), bias=Tensor([5592406],"float32"), padding=3, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 256, 28],"float32"), Tensor([5592406, 256, 3],"float32"), bias=Tensor([5592406],"float32"), padding=5, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 3, 5],"float32"), Tensor([253522376, 3, 3],"float32"), bias=Tensor([253522376],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 3, 5],"float32"), Tensor([477218589, 3, 3],"float32"), bias=Tensor([477218589],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 384, 11184811],"float32"), Tensor([384, 384, 3],"float32"), bias=Tensor([384],"float32"), padding=1, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 768, 5592406],"float32"), Tensor([768, 768, 3],"float32"), bias=Tensor([768],"float32"), padding=1, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 24, 14],"float32"), Tensor([22369622, 12, 16],"float32"), bias=Tensor([22369622],"float32"), padding=8, stride=list[1,], dilation=list[1,], groups=2, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 32, 62],"float32"), Tensor([16777216, 32, 8],"float32"), bias=None, padding=0, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([178956971, 3, 4],"float64"), Tensor([6, 1, 3],"float64"), bias=Tensor([6],"float64"), padding=0, stride=list[2,], dilation=list[1,], groups=3, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 128, 112],"float32"), Tensor([11184811, 128, 3],"float32"), bias=Tensor([11184811],"float32"), padding=3, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 128, 112],"float32"), Tensor([11184811, 128, 3],"float32"), bias=Tensor([11184811],"float32"), padding=5, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 128, 112],"float32"), Tensor([3050403, 128, 11],"float32"), bias=Tensor([3050403],"float32"), padding=15, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 128, 112],"float32"), Tensor([3050403, 128, 11],"float32"), bias=Tensor([3050403],"float32"), padding=25, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 128, 112],"float32"), Tensor([3050403, 128, 11],"float32"), bias=Tensor([3050403],"float32"), padding=5, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 128, 112],"float32"), Tensor([4793491, 128, 7],"float32"), bias=Tensor([4793491],"float32"), padding=15, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 128, 112],"float32"), Tensor([4793491, 128, 7],"float32"), bias=Tensor([4793491],"float32"), padding=9, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float32"), Tensor([477218589, 3, 3],"float32"), bias=Tensor([477218589],"float32"), padding=0, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float32"), Tensor([477218589, 3, 3],"float32"), bias=Tensor([477218589],"float32"), padding=list[1,], stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float64"), Tensor([238609295, 3, 3],"float64"), bias=Tensor([238609295],"float64"), padding=0, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float64"), Tensor([238609295, 3, 3],"float64"), bias=Tensor([238609295],"float64"), padding=1, stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float64"), Tensor([238609295, 3, 3],"float64"), bias=Tensor([238609295],"float64"), padding=list[1,], stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 4, 3],"float32"), Tensor([477218589, 3, 3],"float32"), bias=Tensor([477218589],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([2, 4, 3],"float64"), Tensor([238609295, 3, 3],"float64"), bias=Tensor([238609295],"float64"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([357913942, 3, 4],"float32"), Tensor([6, 1, 3],"float32"), bias=Tensor([6],"float32"), padding=0, stride=list[2,], dilation=list[1,], groups=3, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([8, 6, 89478486],"float32"), bias=Tensor([8],"float32"), padding="same", stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(x=Tensor([178956971, 3, 4],"float64"), weight=Tensor([6, 1, 3],"float64"), bias=Tensor([6],"float64"), stride=2, padding=0, groups=3, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float32"), weight=Tensor([380283564, 3, 2],"float32"), bias=Tensor([380283564],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float32"), weight=Tensor([477218589, 3, 3],"float32"), bias=Tensor([477218589],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float32"), weight=Tensor([477218589, 3, 3],"float32"), bias=Tensor([477218589],"float32"), stride=2, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float32"), weight=Tensor([477218589, 3, 3],"float32"), bias=Tensor([477218589],"float32"), stride=2, padding=1, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float64"), weight=Tensor([238609295, 3, 3],"float64"), bias=Tensor([238609295],"float64"), stride=2, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float64"), weight=Tensor([238609295, 3, 3],"float64"), bias=Tensor([238609295],"float64"), stride=list[1,], padding=1, dilation=2, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float64"), weight=Tensor([238609295, 3, 3],"float64"), bias=Tensor([238609295],"float64"), stride=list[1,], padding=list[1,], dilation=tuple(2,), )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float64"), weight=Tensor([357913942, 3, 2],"float64"), bias=Tensor([357913942],"float64"), stride=1, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 715827883],"float32"), weight=Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[1,], padding=1, dilation=2, )
paddle.nn.functional.conv1d(x=Tensor([2, 4, 3],"float32"), weight=Tensor([477218589, 3, 3],"float32"), bias=Tensor([477218589],"float32"), stride=1, padding=0, data_format="NLC", )
paddle.nn.functional.conv1d(x=Tensor([357913942, 3, 4],"float32"), weight=Tensor([6, 1, 3],"float32"), bias=Tensor([6],"float32"), stride=2, padding=0, groups=3, )
paddle.nn.functional.conv1d_transpose(Tensor([1, 128, 112],"float32"), Tensor([128, 64, 524288],"float32"), bias=Tensor([64],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([1, 256, 28],"float32"), Tensor([256, 128, 131072],"float32"), bias=Tensor([128],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([1, 512, 7],"float32"), Tensor([512, 256, 32768],"float32"), bias=Tensor([256],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([1, 64, 448],"float32"), Tensor([64, 32, 2097152],"float32"), bias=Tensor([32],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 128, 112],"float32"), Tensor([128, 64, 524288],"float32"), bias=Tensor([64],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float32"), Tensor([3, 477218589, 3],"float32"), bias=Tensor([1],"float32"), output_size=None, output_padding=0, padding=1, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float32"), Tensor([3, 477218589, 3],"float32"), bias=Tensor([1],"float32"), output_size=None, output_padding=0, padding=list[1,], stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float32"), Tensor([3, 477218589, 3],"float32"), bias=Tensor([1],"float32"), output_size=None, output_padding=0, padding=list[1,], stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([380283564, 3, 2],"float32"), Tensor([3, 1, 3],"float32"), bias=Tensor([3],"float32"), output_size=None, output_padding=0, padding=list[1,], stride=list[1,], dilation=list[1,], groups=3, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 16, 6],"float32"), Tensor([6, 8, 47535446],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float32"), weight=Tensor([3, 253522376, 3],"float32"), bias=Tensor([253522376],"float32"), stride=1, padding=list[1,], groups=1, dilation=2, )
paddle.nn.functional.conv1d_transpose(x=Tensor([380283564, 3, 2],"float32"), weight=Tensor([3, 1, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,], groups=3, dilation=1, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 10, 222823],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 10, 419431],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 116509, 36],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 12, 349526],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 123362, 34],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 161320, 26],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 85701, 26],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 11184811, 12, 32],"float32"), Tensor([256, 11184811, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 12, 20],"float32"), Tensor([3728271, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 12, 32],"float32"), Tensor([3728271, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 12, 36],"float32"), Tensor([3728271, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 256, 69633],"float32"), Tensor([3, 128, 1, 1],"float32"), padding=0, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 256, 69633],"float32"), Tensor([3, 128, 1, 69633],"float32"), padding=0, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 69633, 256],"float32"), Tensor([3, 128, 1, 1],"float32"), padding=0, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 69633, 256],"float32"), Tensor([3, 128, 69633, 1],"float32"), padding=0, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 3, 224, 3395389],"float32"), Tensor([3, 3, 3, 3],"float32"), Tensor([3],"float32"), list[3,2,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 3, 224, 3395389],"float32"), Tensor([3, 3, 3, 3],"float32"), Tensor([3],"float32"), list[4,3,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 3, 224, 6391321],"float32"), Tensor([3, 3, 3, 3],"float32"), Tensor([3],"float32"), list[3,2,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 3, 224, 6391321],"float32"), Tensor([3, 3, 3, 3],"float32"), Tensor([3],"float32"), list[4,3,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 3, 3395389, 224],"float32"), Tensor([3, 3, 3, 3],"float32"), Tensor([3],"float32"), list[3,2,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 3, 3395389, 224],"float32"), Tensor([3, 3, 3, 3],"float32"), Tensor([3],"float32"), list[4,3,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 3, 6391321, 224],"float32"), Tensor([3, 3, 3, 3],"float32"), Tensor([3],"float32"), list[3,2,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 3, 6391321, 224],"float32"), Tensor([3, 3, 3, 3],"float32"), Tensor([3],"float32"), list[4,3,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 34817, 256, 256],"float32"), Tensor([3, 34817, 1, 1],"float32"), padding=0, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 512, 16, 16],"float32"), Tensor([932068, 512, 3, 3],"float32"), padding=1, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 512, 32, 32],"float32"), Tensor([932068, 512, 3, 3],"float32"), padding=1, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 512, 4, 4],"float32"), Tensor([932068, 512, 3, 3],"float32"), padding=1, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 8775775, 10, 26],"float32"), Tensor([256, 8775775, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 8912897, 10, 26],"float32"), Tensor([256, 8912897, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 64, 26215, 136],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1009, 256, 129, 129],"float32"), Tensor([1009, 256, 3, 3],"float32"), bias=None, stride=2, padding=0, )
paddle.nn.functional.conv2d(Tensor([1009, 256, 129, 129],"float32"), Tensor([512, 256, 3, 3],"float32"), bias=None, stride=2, padding=0, )
paddle.nn.functional.conv2d(Tensor([1024, 130, 131, 131],"float32"), Tensor([1, 130, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([1024, 256, 128, 128],"float32"), Tensor([256, 256, 3, 3],"float32"), bias=None, stride=1, padding=1, )
paddle.nn.functional.conv2d(Tensor([1024, 256, 128, 128],"float32"), Tensor([256, 256, 3, 3],"float32"), padding=1, groups=1, )
paddle.nn.functional.conv2d(Tensor([1024, 256, 128, 128],"float32"), Tensor([3, 256, 1, 1],"float32"), padding=0, groups=1, )
paddle.nn.functional.conv2d(Tensor([1024, 4096, 32, 32],"float32"), Tensor([1024, 512, 3, 3],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([128, 2048, 128, 128],"float32"), Tensor([128, 256, 3, 3],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([128, 2048, 128, 128],"float32"), Tensor([2048, 256, 3, 3],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([137, 1024, 128, 128],"float32"), Tensor([1024, 256, 3, 3],"float32"), padding=1, groups=4, )
paddle.nn.functional.conv2d(Tensor([16, 3, 260, 344149],"float32"), weight=Tensor([3, 1, 5, 344149],"float32"), groups=3, )
paddle.nn.functional.conv2d(Tensor([16, 3, 268, 333875],"float32"), weight=Tensor([3, 1, 13, 13],"float32"), groups=3, )
paddle.nn.functional.conv2d(Tensor([16, 3, 268, 333875],"float32"), weight=Tensor([3, 1, 13, 333875],"float32"), groups=3, )
paddle.nn.functional.conv2d(Tensor([16385, 64, 16, 136],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([24, 21179, 67, 67],"float32"), Tensor([1, 21179, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([273, 128, 256, 256],"float32"), Tensor([128, 128, 3, 3],"float32"), bias=None, stride=1, padding=1, )
paddle.nn.functional.conv2d(Tensor([273, 128, 256, 256],"float32"), Tensor([128, 128, 3, 3],"float32"), padding=1, groups=1, )
paddle.nn.functional.conv2d(Tensor([273, 128, 256, 256],"float32"), Tensor([3, 128, 1, 1],"float32"), padding=0, groups=1, )
paddle.nn.functional.conv2d(Tensor([35, 1024, 256, 256],"float32"), Tensor([1024, 128, 3, 3],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([4, 3, 16, 11883862],"float32"), Tensor([5, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[0,0,],list[1,1,],list[2,2,],], stride=1, dilation=1, groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([4096, 430, 36, 36],"float32"), Tensor([1, 430, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([545, 256, 128, 128],"float32"), Tensor([256, 256, 3, 3],"float32"), bias=None, stride=1, padding=1, )
paddle.nn.functional.conv2d(Tensor([64, 45474, 28, 28],"float32"), Tensor([6, 45474, 3, 3],"float32"), bias=None, padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([6854, 128, 17, 153],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([69, 2048, 128, 128],"float32"), Tensor([2048, 256, 3, 3],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 1024, 16, 16],"float32"), Tensor([1024, 256, 4, 4096],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 1024, 16, 16],"float32"), Tensor([1024, 256, 4096, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 1024, 16, 16],"float32"), Tensor([1024, 262144, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 1024, 2, 2],"float32"), Tensor([1024, 262144, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 1024, 2, 2],"float32"), Tensor([1024, 512, 2048, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 1024, 2, 2],"float32"), Tensor([1024, 512, 4, 2048],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 1024, 4, 4],"float32"), Tensor([1024, 262144, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 1024, 4, 4],"float32"), Tensor([1024, 512, 2048, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 1024, 4, 4],"float32"), Tensor([1024, 512, 4, 2048],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 1024, 8, 8],"float32"), Tensor([1024, 262144, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 1024, 8, 8],"float32"), Tensor([1024, 512, 2048, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 1024, 8, 8],"float32"), Tensor([1024, 512, 4, 2048],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 256, 128, 128],"float32"), Tensor([256, 128, 3, 43691],"float32"), padding=0, stride=2, groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 256, 128, 128],"float32"), Tensor([256, 128, 43691, 3],"float32"), padding=0, stride=2, groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 256, 14, 14],"float32"), Tensor([256, 256, 2, 32768],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 256, 14, 14],"float32"), Tensor([256, 256, 32768, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 256, 64, 64],"float32"), Tensor([256, 128, 3, 43691],"float32"), bias=Tensor([128],"float32"), padding=1, output_padding=1, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 256, 64, 64],"float32"), Tensor([256, 128, 43691, 3],"float32"), bias=Tensor([128],"float32"), padding=1, output_padding=1, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 512, 16, 16],"float32"), Tensor([512, 512, 3, 5462],"float32"), padding=0, stride=2, groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 512, 16, 16],"float32"), Tensor([512, 512, 5462, 3],"float32"), padding=0, stride=2, groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 512, 16, 16],"float32"), Tensor([512, 932068, 3, 3],"float32"), padding=0, stride=2, groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 512, 32, 32],"float32"), Tensor([512, 512, 3, 5462],"float32"), padding=0, stride=2, groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 512, 32, 32],"float32"), Tensor([512, 512, 5462, 3],"float32"), padding=0, stride=2, groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 512, 32, 32],"float32"), Tensor([512, 932068, 3, 3],"float32"), padding=0, stride=2, groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 512, 4, 4],"float32"), Tensor([512, 512, 3, 5462],"float32"), padding=0, stride=2, groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 512, 4, 4],"float32"), Tensor([512, 512, 5462, 3],"float32"), padding=0, stride=2, groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 512, 4, 4],"float32"), Tensor([512, 932068, 3, 3],"float32"), padding=0, stride=2, groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 512, 64, 64],"float32"), Tensor([512, 256, 10923, 3],"float32"), padding=0, stride=2, groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 512, 64, 64],"float32"), Tensor([512, 256, 3, 10923],"float32"), padding=0, stride=2, groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([10, 256, 14, 14],"float32"), Tensor([256, 256, 2, 32768],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([10, 256, 14, 14],"float32"), Tensor([256, 256, 32768, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([10496, 16, 172, 79],"float32"), Tensor([16, 8, 5, 5],"float32"), bias=Tensor([8],"float32"), padding=2, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([106, 256, 14, 14],"float16"), Tensor([256, 256, 2, 32768],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([106, 256, 14, 14],"float16"), Tensor([256, 256, 32768, 2],"float16"), bias=Tensor([256],"float16"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 178956971, 3],"float64"), Tensor([2, 2, 178956971, 1],"float64"), groups=1, padding="SAME", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 178956971, 3],"float64"), Tensor([2, 2, 178956971, 1],"float64"), groups=1, padding="VALID", )
paddle.nn.functional.conv2d_transpose(Tensor([43638, 64, 43, 19],"float32"), Tensor([64, 32, 5, 5],"float32"), bias=Tensor([32],"float32"), padding=2, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([64, 16, 172, 12955],"float32"), Tensor([16, 8, 5, 5],"float32"), bias=Tensor([8],"float32"), padding=2, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([64, 16, 28206, 79],"float32"), Tensor([16, 8, 5, 5],"float32"), bias=Tensor([8],"float32"), padding=2, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([64, 2624, 172, 79],"float32"), Tensor([2624, 8, 5, 5],"float32"), bias=Tensor([8],"float32"), padding=2, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([64, 64, 29319, 19],"float32"), Tensor([64, 32, 5, 5],"float32"), bias=Tensor([32],"float32"), padding=2, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([64, 64, 43, 12955],"float32"), Tensor([64, 32, 5, 5],"float32"), bias=Tensor([32],"float32"), padding=2, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([8, 2048, 16, 16],"float16"), Tensor([2048, 128, 4, 4097],"float16"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([8, 2048, 16, 16],"float16"), Tensor([2048, 128, 4097, 4],"float16"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([8, 2048, 16, 16],"float16"), Tensor([2048, 131073, 4, 4],"float16"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv3d(Tensor([4, 6, 8, 8, 8],"float32"), Tensor([8, 3, 19884108, 3, 3],"float32"), Tensor([8],"float32"), padding="same", stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 6, 8, 8, 8],"float32"), Tensor([8, 3, 3, 19884108, 3],"float32"), Tensor([8],"float32"), padding="same", stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 6, 8, 8, 8],"float32"), Tensor([8, 3, 3, 3, 19884108],"float32"), Tensor([8],"float32"), padding="same", stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 44739243],"float16"), weight=Tensor([1, 3, 3, 3, 3],"float16"), bias=Tensor([1],"float16"), stride=2, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 44739243],"float16"), weight=Tensor([1, 3, 3, 3, 3],"float16"), bias=Tensor([1],"float16"), stride=2, padding=1, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 44739243],"float16"), weight=Tensor([1, 3, 3, 3, 3],"float16"), bias=Tensor([1],"float16"), stride=list[2,2,1,], padding=1, dilation=list[2,2,2,], )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 44739243],"float16"), weight=Tensor([1, 3, 3, 3, 3],"float16"), bias=Tensor([1],"float16"), stride=list[2,2,1,], padding=1, dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 44739243],"float16"), weight=Tensor([1, 3, 3, 3, 3],"float16"), bias=Tensor([1],"float16"), stride=list[2,2,1,], padding=list[1,2,2,], dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 44739243],"float16"), weight=Tensor([1, 3, 3, 3, 3],"float16"), bias=Tensor([1],"float16"), stride=list[2,2,1,], padding=tuple(1,2,2,), dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 44739243],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 44739243],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=list[1,2,2,], dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 44739243],"float32"), weight=Tensor([3, 3, 2, 2, 2],"float32"), bias=Tensor([3],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([53024288, 3, 3, 3, 3],"float32"), bias=Tensor([53024288],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([53024288, 3, 3, 3, 3],"float32"), bias=Tensor([53024288],"float32"), stride=2, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([53024288, 3, 3, 3, 3],"float32"), bias=Tensor([53024288],"float32"), stride=2, padding=1, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([53024288, 3, 3, 3, 3],"float32"), bias=Tensor([53024288],"float32"), stride=list[2,2,1,], padding=1, dilation=2, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([53024288, 3, 3, 3, 3],"float32"), bias=Tensor([53024288],"float32"), stride=list[2,2,1,], padding=1, dilation=list[2,2,2,], )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([53024288, 3, 3, 3, 3],"float32"), bias=Tensor([53024288],"float32"), stride=list[2,2,1,], padding=1, dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([53024288, 3, 3, 3, 3],"float32"), bias=Tensor([53024288],"float32"), stride=list[2,2,1,], padding=list[1,2,2,], dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([53024288, 3, 3, 3, 3],"float32"), bias=Tensor([53024288],"float32"), stride=list[2,2,1,], padding=tuple(1,2,2,), dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([26512144, 3, 3, 3, 3],"float64"), bias=Tensor([26512144],"float64"), stride=list[2,2,1,], padding=1, dilation=list[2,2,2,], )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([26512144, 3, 3, 3, 3],"float64"), bias=Tensor([26512144],"float64"), stride=list[2,2,1,], padding=1, dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([26512144, 3, 3, 3, 3],"float64"), bias=Tensor([26512144],"float64"), stride=list[2,2,1,], padding=tuple(1,2,2,), dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 44739243, 4],"float16"), weight=Tensor([1, 3, 3, 3, 3],"float16"), bias=Tensor([1],"float16"), stride=2, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 44739243, 4],"float16"), weight=Tensor([1, 3, 3, 3, 3],"float16"), bias=Tensor([1],"float16"), stride=list[2,2,1,], padding=1, dilation=2, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 44739243, 4],"float16"), weight=Tensor([1, 3, 3, 3, 3],"float16"), bias=Tensor([1],"float16"), stride=list[2,2,1,], padding=list[1,2,2,], dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 44739243, 4],"float16"), weight=Tensor([1, 3, 3, 3, 3],"float16"), bias=Tensor([1],"float16"), stride=list[2,2,1,], padding=tuple(1,2,2,), dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 44739243, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 44739243, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=1, dilation=list[2,2,2,], )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 44739243, 4],"float32"), weight=Tensor([3, 3, 2, 2, 2],"float32"), bias=Tensor([3],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 44739243, 4, 4],"float16"), weight=Tensor([1, 3, 3, 3, 3],"float16"), bias=Tensor([1],"float16"), stride=2, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 44739243, 4, 4],"float16"), weight=Tensor([1, 3, 3, 3, 3],"float16"), bias=Tensor([1],"float16"), stride=2, padding=1, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 44739243, 4, 4],"float16"), weight=Tensor([1, 3, 3, 3, 3],"float16"), bias=Tensor([1],"float16"), stride=list[2,2,1,], padding=1, dilation=2, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 44739243, 4, 4],"float16"), weight=Tensor([1, 3, 3, 3, 3],"float16"), bias=Tensor([1],"float16"), stride=list[2,2,1,], padding=1, dilation=list[2,2,2,], )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 44739243, 4, 4],"float16"), weight=Tensor([1, 3, 3, 3, 3],"float16"), bias=Tensor([1],"float16"), stride=list[2,2,1,], padding=1, dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 44739243, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 44739243, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=1, dilation=list[2,2,2,], )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 44739243, 4, 4],"float32"), weight=Tensor([3, 3, 2, 2, 2],"float32"), bias=Tensor([3],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 4, 4, 4, 3],"float32"), weight=Tensor([53024288, 3, 3, 3, 3],"float32"), bias=Tensor([53024288],"float32"), stride=1, padding=0, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 1, 159072863, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=1, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 1, 159072863, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 1, 3, 159072863, 3],"float32"), bias=Tensor([1],"float32"), padding=1, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 1, 3, 159072863, 3],"float32"), bias=Tensor([1],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 1, 3, 3, 159072863],"float32"), bias=Tensor([1],"float32"), padding=1, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 1, 3, 3, 159072863],"float32"), bias=Tensor([1],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 12, 12, 12, 828505],"float32"), bias=Tensor([12],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 53024288, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=1, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 53024288, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float64"), Tensor([3, 1, 3, 3, 79536432],"float64"), bias=Tensor([1],"float64"), padding=1, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float64"), Tensor([3, 1, 3, 3, 79536432],"float64"), bias=Tensor([1],"float64"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float64"), Tensor([3, 1, 3, 79536432, 3],"float64"), bias=Tensor([1],"float64"), padding=1, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float64"), Tensor([3, 1, 3, 79536432, 3],"float64"), bias=Tensor([1],"float64"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float64"), Tensor([3, 1, 79536432, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=1, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float64"), Tensor([3, 1, 79536432, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float64"), Tensor([3, 2, 39768216, 3, 3],"float64"), bias=Tensor([2],"float64"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 4],"float32"), Tensor([4, 3, 3, 3, 39768216],"float32"), None, output_size=None, padding="same", stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 4],"float32"), Tensor([4, 3, 3, 39768216, 3],"float32"), None, output_size=None, padding="same", stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 4],"float32"), Tensor([4, 3, 39768216, 3, 3],"float32"), None, output_size=None, padding="same", stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 1, 159072863, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 1, 159072863, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,0,1,], dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 1, 3, 159072863, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 1, 3, 159072863, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,0,1,], dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3, 159072863],"float32"), bias=Tensor([1],"float32"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3, 159072863],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,0,1,], dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 53024288, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 53024288, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,0,1,], dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3, 79536432],"float64"), bias=Tensor([1],"float64"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3, 79536432],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,1,], dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float64"), weight=Tensor([3, 1, 3, 79536432, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float64"), weight=Tensor([3, 1, 3, 79536432, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,1,], dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float64"), weight=Tensor([3, 1, 79536432, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float64"), weight=Tensor([3, 1, 79536432, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,1,], dilation=1, )
paddle.nn.functional.nll_loss(Tensor([95070891, 3, 2, 4],"float32"), Tensor([95070891, 2, 4],"int64"),)
paddle.nn.functional.upsample(x=Tensor([1, 1073741825, 2, 2, 1],"float16"), size=Tensor([3],"float16"), scale_factor=None, mode="trilinear", align_corners=True, align_mode=1, data_format="NDHWC", )
paddle.nn.functional.upsample(x=Tensor([1, 2, 1073741825, 2, 1],"float16"), size=Tensor([3],"float16"), scale_factor=None, mode="trilinear", align_corners=True, align_mode=1, data_format="NDHWC", )
paddle.nn.functional.upsample(x=Tensor([1, 2, 2, 1073741825, 1],"float16"), size=Tensor([3],"float16"), scale_factor=None, mode="trilinear", align_corners=True, align_mode=1, data_format="NDHWC", )
paddle.nn.functional.upsample(x=Tensor([1, 2, 2147483649, 1],"float16"), size=Tensor([2],"float16"), scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NHWC", )
paddle.nn.functional.upsample(x=Tensor([1, 2147483649, 2, 1],"float16"), size=Tensor([2],"float16"), scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NHWC", )
paddle.nn.functional.upsample(x=Tensor([2, 1, 536870913, 4],"float16"), size=Tensor([2],"float16"), scale_factor=None, mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", )
paddle.nn.functional.upsample(x=Tensor([2, 1, 4, 536870913],"float16"), size=Tensor([2],"float16"), scale_factor=None, mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", )
paddle.digamma(Tensor([10, 10, 10, 4294968],"float16"), )
paddle.digamma(Tensor([10, 10, 21474837, 2],"float16"), )
paddle.digamma(Tensor([10, 10, 42949673],"float16"), )
paddle.digamma(Tensor([10, 21474837, 10, 2],"float16"), )
paddle.digamma(Tensor([10, 42949673, 10],"float16"), )
paddle.digamma(Tensor([1398102, 3, 32, 32],"float16"), )
paddle.digamma(Tensor([1431655766, 3],"float16"), )
paddle.digamma(Tensor([2, 1073741825, 2],"float16"), )
paddle.digamma(Tensor([2, 2147483649],"float16"), )
paddle.digamma(Tensor([2, 5, 429496730],"float16"), )
paddle.digamma(Tensor([21474837, 10, 10, 2],"float16"), )
paddle.digamma(Tensor([4294967297],"float16"), )
paddle.digamma(Tensor([42949673, 10, 10],"float16"), )
paddle.digamma(Tensor([429496730, 5, 2],"float16"), )
paddle.digamma(Tensor([8, 3, 32, 5592406],"float16"), )
paddle.digamma(Tensor([8, 3, 5592406, 32],"float16"), )
paddle.digamma(Tensor([8, 524289, 32, 32],"float16"), )
paddle.digamma(Tensor([858993460, 5],"float16"), )
paddle.digamma(x=Tensor([119304648, 6, 6],"float16"), )
paddle.digamma(x=Tensor([1431655766, 3],"float16"), )
paddle.digamma(x=Tensor([19884108, 6, 6, 6],"float16"), )
paddle.digamma(x=Tensor([3, 1431655766],"float16"), )
paddle.digamma(x=Tensor([3, 6, 6, 6, 6628036],"float16"), )
paddle.digamma(x=Tensor([3, 6, 6, 6628036, 6],"float16"), )
paddle.digamma(x=Tensor([3, 6, 6628036, 6, 6],"float16"), )
paddle.digamma(x=Tensor([3, 6628036, 6, 6, 6],"float16"), )
paddle.digamma(x=Tensor([3314018, 6, 6, 6, 6],"float16"), )
paddle.digamma(x=Tensor([6, 119304648, 6],"float16"), )
paddle.digamma(x=Tensor([6, 19884108, 6, 6],"float16"), )
paddle.digamma(x=Tensor([6, 6, 119304648],"float16"), )
paddle.digamma(x=Tensor([6, 6, 19884108, 6],"float16"), )
paddle.digamma(x=Tensor([6, 6, 6, 19884108],"float16"), )
paddle.linalg.multi_dot(list[Tensor([4],"float16"),Tensor([4, 1073741825],"float16"),Tensor([1073741825, 4],"float16"),Tensor([4, 5],"float16"),], )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[0.7999999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[1.2999999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[1.4999999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[1.5999999999999996,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[2.0999999999999996,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[2.4999999999999996,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[2.6999999999999997,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[2.8999999999999995,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[3.2999999999999994,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[3.2999999999999994,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[3.6999999999999993,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[3.6999999999999993,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[3.9999999999999996,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[4.099999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[4.499999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[4.599999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[4.899999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[4.999999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[5.199999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[5.599999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[5.699999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[6.199999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[6.299999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[6.699999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[6.899999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[7.199999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[7.599999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[7.699999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[7.999999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[8.199999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[8.499999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float32"), size=None, scale_factor=list[8.599999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[0.7999999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[1.1999999999999997,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[1.5999999999999996,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[1.6999999999999997,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[2.5999999999999996,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[2.5999999999999996,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[2.8999999999999995,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[3.0999999999999996,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[3.1999999999999997,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[3.3999999999999995,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[3.4999999999999996,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[3.8999999999999995,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[4.099999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[4.399999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[4.699999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[4.899999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[4.999999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[5.199999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[5.399999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[5.699999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[5.999999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[6.399999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[6.499999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[6.799999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[6.999999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[7.199999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[7.399999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[7.699999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[7.699999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[7.999999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[8.299999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[8.499999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 4],"float64"), size=None, scale_factor=list[8.599999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,2.9999999999999996,], mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,4.199999999999999,], mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,4.199999999999999,], mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=None, scale_factor=list[2.9999999999999996,1.7999999999999998,], mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float32"), size=None, scale_factor=list[2.9999999999999996,2.9999999999999996,], mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=None, scale_factor=list[0.6,4.199999999999999,], mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=None, scale_factor=list[1.7999999999999998,2.9999999999999996,], mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=None, scale_factor=list[1.7999999999999998,4.199999999999999,], mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=None, scale_factor=list[2.9999999999999996,1.7999999999999998,], mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 10],"float64"), size=None, scale_factor=list[2.9999999999999996,1.7999999999999998,], mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.margin_ranking_loss(Tensor([10, 429496730],"float16"), Tensor([10, 429496730],"float16"), Tensor([10, 429496730],"float16"), 0.0, "mean", )
paddle.nn.functional.margin_ranking_loss(Tensor([10, 429496730],"float16"), Tensor([10, 429496730],"float16"), Tensor([10, 429496730],"float16"), 0.0, "mean", None, )
paddle.nn.functional.margin_ranking_loss(Tensor([10, 429496730],"float16"), Tensor([10, 429496730],"float16"), Tensor([10, 429496730],"float16"), 0.0, "sum", )
paddle.nn.functional.margin_ranking_loss(Tensor([10, 429496730],"float16"), Tensor([10, 429496730],"float16"), Tensor([10, 429496730],"float16"), 0.0, "sum", None, )
paddle.nn.functional.margin_ranking_loss(Tensor([10, 429496730],"float16"), Tensor([10, 429496730],"float16"), Tensor([10, 429496730],"float16"), 0.2, "mean", )
paddle.nn.functional.margin_ranking_loss(Tensor([10, 429496730],"float16"), Tensor([10, 429496730],"float16"), Tensor([10, 429496730],"float16"), 0.2, "mean", None, )
paddle.nn.functional.margin_ranking_loss(Tensor([10, 429496730],"float16"), Tensor([10, 429496730],"float16"), Tensor([10, 429496730],"float16"), 0.2, "sum", )
paddle.nn.functional.margin_ranking_loss(Tensor([10, 429496730],"float16"), Tensor([10, 429496730],"float16"), Tensor([10, 429496730],"float16"), 0.2, "sum", None, )
paddle.nn.functional.margin_ranking_loss(Tensor([2, 2147483649],"float16"), Tensor([2, 2147483649],"float16"), Tensor([2, 2147483649],"float16"), 0.0, "mean", None, )
paddle.nn.functional.margin_ranking_loss(Tensor([2, 2147483649],"float16"), other=Tensor([2, 2147483649],"float16"), label=Tensor([2, 2147483649],"float16"), margin=0.0, reduction="mean", name=None, )
paddle.nn.functional.margin_ranking_loss(Tensor([2147483649, 2],"float16"), Tensor([2147483649, 2],"float16"), Tensor([2147483649, 2],"float16"), 0.0, "mean", None, )
paddle.nn.functional.margin_ranking_loss(Tensor([2147483649, 2],"float16"), other=Tensor([2147483649, 2],"float16"), label=Tensor([2147483649, 2],"float16"), margin=0.0, reduction="mean", name=None, )
paddle.nn.functional.margin_ranking_loss(Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), 0.5, "mean", None, )
paddle.nn.functional.margin_ranking_loss(Tensor([4294967297],"float16"), Tensor([4294967297],"float16"), Tensor([4294967297],"float16"), 0.5, "mean", None, )
paddle.nn.functional.margin_ranking_loss(Tensor([429496730, 10],"float16"), Tensor([429496730, 10],"float16"), Tensor([429496730, 10],"float16"), 0.0, "mean", )
paddle.nn.functional.margin_ranking_loss(Tensor([429496730, 10],"float16"), Tensor([429496730, 10],"float16"), Tensor([429496730, 10],"float16"), 0.0, "mean", None, )
paddle.nn.functional.margin_ranking_loss(Tensor([429496730, 10],"float16"), Tensor([429496730, 10],"float16"), Tensor([429496730, 10],"float16"), 0.0, "sum", )
paddle.nn.functional.margin_ranking_loss(Tensor([429496730, 10],"float16"), Tensor([429496730, 10],"float16"), Tensor([429496730, 10],"float16"), 0.0, "sum", None, )
paddle.nn.functional.margin_ranking_loss(Tensor([429496730, 10],"float16"), Tensor([429496730, 10],"float16"), Tensor([429496730, 10],"float16"), 0.2, "mean", None, )
paddle.nn.functional.margin_ranking_loss(Tensor([429496730, 10],"float16"), Tensor([429496730, 10],"float16"), Tensor([429496730, 10],"float16"), 0.2, "sum", )
paddle.nn.functional.margin_ranking_loss(Tensor([429496730, 10],"float16"), Tensor([429496730, 10],"float16"), Tensor([429496730, 10],"float16"), 0.2, "sum", None, )
paddle.nn.functional.margin_ranking_loss(Tensor([10, 429496730],"float16"), Tensor([10, 429496730],"float16"), Tensor([10, 429496730],"float16"), 0.0, "mean", )
paddle.nn.functional.margin_ranking_loss(Tensor([10, 429496730],"float16"), Tensor([10, 429496730],"float16"), Tensor([10, 429496730],"float16"), 0.0, "mean", None, )
paddle.nn.functional.margin_ranking_loss(Tensor([10, 429496730],"float16"), Tensor([10, 429496730],"float16"), Tensor([10, 429496730],"float16"), 0.0, "sum", )
paddle.nn.functional.margin_ranking_loss(Tensor([10, 429496730],"float16"), Tensor([10, 429496730],"float16"), Tensor([10, 429496730],"float16"), 0.0, "sum", None, )
paddle.nn.functional.margin_ranking_loss(Tensor([10, 429496730],"float16"), Tensor([10, 429496730],"float16"), Tensor([10, 429496730],"float16"), 0.2, "mean", )
paddle.nn.functional.margin_ranking_loss(Tensor([10, 429496730],"float16"), Tensor([10, 429496730],"float16"), Tensor([10, 429496730],"float16"), 0.2, "mean", None, )
paddle.nn.functional.margin_ranking_loss(Tensor([10, 429496730],"float16"), Tensor([10, 429496730],"float16"), Tensor([10, 429496730],"float16"), 0.2, "sum", )
paddle.nn.functional.margin_ranking_loss(Tensor([10, 429496730],"float16"), Tensor([10, 429496730],"float16"), Tensor([10, 429496730],"float16"), 0.2, "sum", None, )
paddle.nn.functional.margin_ranking_loss(Tensor([2, 2147483649],"float16"), Tensor([2, 2147483649],"float16"), Tensor([2, 2147483649],"float16"), 0.0, "mean", None, )
paddle.nn.functional.margin_ranking_loss(Tensor([2, 2147483649],"float16"), other=Tensor([2, 2147483649],"float16"), label=Tensor([2, 2147483649],"float16"), margin=0.0, reduction="mean", name=None, )
paddle.nn.functional.margin_ranking_loss(Tensor([2147483649, 2],"float16"), Tensor([2147483649, 2],"float16"), Tensor([2147483649, 2],"float16"), 0.0, "mean", None, )
paddle.nn.functional.margin_ranking_loss(Tensor([2147483649, 2],"float16"), other=Tensor([2147483649, 2],"float16"), label=Tensor([2147483649, 2],"float16"), margin=0.0, reduction="mean", name=None, )
paddle.nn.functional.margin_ranking_loss(Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), 0.5, "mean", None, )
paddle.nn.functional.margin_ranking_loss(Tensor([4294967297],"float16"), Tensor([4294967297],"float16"), Tensor([4294967297],"float16"), 0.5, "mean", None, )
paddle.nn.functional.margin_ranking_loss(Tensor([429496730, 10],"float16"), Tensor([429496730, 10],"float16"), Tensor([429496730, 10],"float16"), 0.0, "mean", )
paddle.nn.functional.margin_ranking_loss(Tensor([429496730, 10],"float16"), Tensor([429496730, 10],"float16"), Tensor([429496730, 10],"float16"), 0.0, "mean", None, )
paddle.nn.functional.margin_ranking_loss(Tensor([429496730, 10],"float16"), Tensor([429496730, 10],"float16"), Tensor([429496730, 10],"float16"), 0.0, "sum", )
paddle.nn.functional.margin_ranking_loss(Tensor([429496730, 10],"float16"), Tensor([429496730, 10],"float16"), Tensor([429496730, 10],"float16"), 0.0, "sum", None, )
paddle.nn.functional.margin_ranking_loss(Tensor([429496730, 10],"float16"), Tensor([429496730, 10],"float16"), Tensor([429496730, 10],"float16"), 0.2, "mean", None, )
paddle.nn.functional.margin_ranking_loss(Tensor([429496730, 10],"float16"), Tensor([429496730, 10],"float16"), Tensor([429496730, 10],"float16"), 0.2, "sum", )
paddle.nn.functional.margin_ranking_loss(Tensor([429496730, 10],"float16"), Tensor([429496730, 10],"float16"), Tensor([429496730, 10],"float16"), 0.2, "sum", None, )
paddle.linalg.lstsq(Tensor([253522376, 9],"float32"), Tensor([253522376, 5],"float32"), rcond=1e-15, driver="gels", )
paddle.Tensor.lu(Tensor([760567127, 3],"float32"), )
paddle.linalg.multi_dot(list[Tensor([4],"float16"),Tensor([4, 1073741825],"float16"),Tensor([1073741825, 2],"float16"),Tensor([2],"float16"),], )
paddle.roll(Tensor([1, 10376, 56, 77, 96],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 114131, 7, 7, 768],"float16"), shifts=tuple(-4,0,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 114131, 7, 7, 768],"float16"), shifts=tuple(4,0,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 11414, 70, 56, 96],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 12682, 56, 63, 96],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 12682, 63, 56, 96],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 14, 14, 1369569],"float16"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 14, 14, 1369569],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 14, 21, 913046],"float16"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 14, 21, 913046],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 14, 24967, 768],"float16"), shifts=tuple(-4,-3,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 14, 24967, 768],"float16"), shifts=tuple(4,3,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 14, 49933, 384],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 14, 7, 2739138],"float16"), shifts=tuple(-4,-3,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 14, 7, 2739138],"float16"), shifts=tuple(4,3,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 21, 14, 913046],"float16"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 21, 14, 913046],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 21, 33289, 384],"float16"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 21, 33289, 384],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 24967, 14, 768],"float16"), shifts=tuple(-4,0,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 28, 28, 342393],"float16"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 28, 28, 342393],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 28, 35, 273914],"float16"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 28, 35, 273914],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 28, 42, 228262],"float16"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 28, 49933, 192],"float16"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 28, 49933, 192],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 33289, 21, 384],"float16"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 33289, 21, 384],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 33289, 42, 192],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 35, 28, 273914],"float16"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 35, 28, 273914],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 35, 39946, 192],"float16"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 35, 39946, 192],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 36315, 77, 96],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 39946, 35, 192],"float16"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 39946, 35, 192],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 44385, 63, 96],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 49933, 14, 384],"float16"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 49933, 14, 384],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 49933, 28, 192],"float16"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 49933, 28, 192],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 49933, 7, 768],"float16"), shifts=tuple(-4,-3,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 49933, 7, 768],"float16"), shifts=tuple(-4,0,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 49933, 7, 768],"float16"), shifts=tuple(4,0,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 49933, 7, 768],"float16"), shifts=tuple(4,3,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 56, 49933, 96],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 56, 56, 85599],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 56, 63, 76088],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 56, 70, 68479],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 63, 44385, 96],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 63, 56, 76088],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 7, 14, 2739138],"float16"), shifts=tuple(-4,0,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 7, 14, 2739138],"float16"), shifts=tuple(4,0,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 7, 49933, 768],"float16"), shifts=tuple(-4,0,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 7, 49933, 768],"float16"), shifts=tuple(4,0,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 7, 49933, 768],"float16"), shifts=tuple(4,0,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 7, 7, 5478275],"float16"), shifts=tuple(-4,0,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 7, 7, 5478275],"float16"), shifts=tuple(4,0,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 16, 70, 56, 68479],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 19022, 28, 42, 192],"float16"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 19022, 28, 42, 192],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 22827, 28, 35, 192],"float16"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 22827, 28, 35, 192],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 22827, 35, 28, 192],"float16"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 22827, 35, 28, 192],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 28533, 28, 28, 192],"float16"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 38044, 14, 21, 384],"float16"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 38044, 14, 21, 384],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 38044, 21, 14, 384],"float16"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 38044, 21, 14, 384],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 57066, 14, 14, 384],"float16"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 57066, 14, 14, 384],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 57066, 14, 7, 768],"float16"), shifts=tuple(4,3,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 57066, 7, 14, 768],"float16"), shifts=tuple(-4,0,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1, 57066, 7, 14, 768],"float16"), shifts=tuple(4,0,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([10700, 56, 56, 128],"float16"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
paddle.roll(Tensor([10700, 56, 56, 128],"float16"), shifts=tuple(3,3,), axis=tuple(1,2,), )
paddle.roll(Tensor([114131, 7, 7, 768],"float16"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
paddle.roll(Tensor([114131, 7, 7, 768],"float16"), shifts=tuple(3,3,), axis=tuple(1,2,), )
paddle.roll(Tensor([1189, 16, 28, 42, 192],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([128, 14, 14, 171197],"float16"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
paddle.roll(Tensor([128, 14, 14, 171197],"float16"), shifts=tuple(3,3,), axis=tuple(1,2,), )
paddle.roll(Tensor([128, 14, 4682, 512],"float16"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
paddle.roll(Tensor([128, 14, 4682, 512],"float16"), shifts=tuple(3,3,), axis=tuple(1,2,), )
paddle.roll(Tensor([128, 14, 6242, 384],"float16"), shifts=tuple(3,3,), axis=tuple(1,2,), )
paddle.roll(Tensor([128, 28, 28, 42800],"float16"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
paddle.roll(Tensor([128, 28, 28, 42800],"float16"), shifts=tuple(3,3,), axis=tuple(1,2,), )
paddle.roll(Tensor([128, 28, 4682, 256],"float16"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
paddle.roll(Tensor([128, 28, 4682, 256],"float16"), shifts=tuple(3,3,), axis=tuple(1,2,), )
paddle.roll(Tensor([128, 28, 6242, 192],"float16"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
paddle.roll(Tensor([128, 28, 6242, 192],"float16"), shifts=tuple(3,3,), axis=tuple(1,2,), )
paddle.roll(Tensor([128, 4682, 14, 512],"float16"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
paddle.roll(Tensor([128, 4682, 14, 512],"float16"), shifts=tuple(3,3,), axis=tuple(1,2,), )
paddle.roll(Tensor([128, 4682, 28, 256],"float16"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
paddle.roll(Tensor([128, 4682, 28, 256],"float16"), shifts=tuple(3,3,), axis=tuple(1,2,), )
paddle.roll(Tensor([128, 4682, 56, 128],"float16"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
paddle.roll(Tensor([128, 4682, 56, 128],"float16"), shifts=tuple(3,3,), axis=tuple(1,2,), )
paddle.roll(Tensor([128, 4682, 7, 1024],"float16"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
paddle.roll(Tensor([128, 4682, 7, 1024],"float16"), shifts=tuple(3,3,), axis=tuple(1,2,), )
paddle.roll(Tensor([128, 56, 4682, 128],"float16"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
paddle.roll(Tensor([128, 56, 4682, 128],"float16"), shifts=tuple(3,3,), axis=tuple(1,2,), )
paddle.roll(Tensor([128, 56, 56, 10700],"float16"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
paddle.roll(Tensor([128, 56, 56, 10700],"float16"), shifts=tuple(3,3,), axis=tuple(1,2,), )
paddle.roll(Tensor([128, 56, 6242, 96],"float16"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
paddle.roll(Tensor([128, 56, 6242, 96],"float16"), shifts=tuple(3,3,), axis=tuple(1,2,), )
paddle.roll(Tensor([128, 6242, 14, 384],"float16"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
paddle.roll(Tensor([128, 6242, 14, 384],"float16"), shifts=tuple(3,3,), axis=tuple(1,2,), )
paddle.roll(Tensor([128, 6242, 28, 192],"float16"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
paddle.roll(Tensor([128, 6242, 28, 192],"float16"), shifts=tuple(3,3,), axis=tuple(1,2,), )
paddle.roll(Tensor([128, 6242, 56, 96],"float16"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
paddle.roll(Tensor([128, 6242, 56, 96],"float16"), shifts=tuple(3,3,), axis=tuple(1,2,), )
paddle.roll(Tensor([128, 6242, 7, 768],"float16"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
paddle.roll(Tensor([128, 6242, 7, 768],"float16"), shifts=tuple(3,3,), axis=tuple(1,2,), )
paddle.roll(Tensor([128, 7, 6242, 768],"float16"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
paddle.roll(Tensor([128, 7, 6242, 768],"float16"), shifts=tuple(3,3,), axis=tuple(1,2,), )
paddle.roll(Tensor([128, 7, 7, 684785],"float16"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
paddle.roll(Tensor([128, 7, 7, 684785],"float16"), shifts=tuple(3,3,), axis=tuple(1,2,), )
paddle.roll(Tensor([14267, 56, 56, 96],"float16"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
paddle.roll(Tensor([14267, 56, 56, 96],"float16"), shifts=tuple(3,3,), axis=tuple(1,2,), )
paddle.roll(Tensor([1427, 16, 28, 35, 192],"float16"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1427, 16, 35, 28, 192],"float16"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1427, 16, 35, 28, 192],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1784, 16, 28, 28, 192],"float16"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([1784, 16, 28, 28, 192],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([21400, 28, 28, 256],"float16"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
paddle.roll(Tensor([21400, 28, 28, 256],"float16"), shifts=tuple(3,3,), axis=tuple(1,2,), )
paddle.roll(Tensor([2378, 16, 14, 21, 384],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([2378, 16, 21, 14, 384],"float16"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([2378, 16, 21, 14, 384],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([28533, 28, 28, 192],"float16"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
paddle.roll(Tensor([28533, 28, 28, 192],"float16"), shifts=tuple(3,3,), axis=tuple(1,2,), )
paddle.roll(Tensor([3567, 16, 14, 14, 384],"float16"), shifts=tuple(-4,-3,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([3567, 16, 14, 7, 768],"float16"), shifts=tuple(-4,-3,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([3567, 16, 14, 7, 768],"float16"), shifts=tuple(4,3,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([3567, 16, 7, 14, 768],"float16"), shifts=tuple(-4,0,-3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([3567, 16, 7, 14, 768],"float16"), shifts=tuple(4,0,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([42800, 14, 14, 512],"float16"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
paddle.roll(Tensor([42800, 14, 14, 512],"float16"), shifts=tuple(3,3,), axis=tuple(1,2,), )
paddle.roll(Tensor([57066, 14, 14, 384],"float16"), shifts=tuple(3,3,), axis=tuple(1,2,), )
paddle.roll(Tensor([649, 16, 56, 77, 96],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([7134, 16, 7, 7, 768],"float16"), shifts=tuple(-4,0,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([7134, 16, 7, 7, 768],"float16"), shifts=tuple(4,0,0,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([714, 16, 56, 70, 96],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([714, 16, 70, 56, 96],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([793, 16, 56, 63, 96],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(Tensor([85599, 7, 7, 1024],"float16"), shifts=tuple(-3,-3,), axis=tuple(1,2,), )
paddle.roll(Tensor([85599, 7, 7, 1024],"float16"), shifts=tuple(3,3,), axis=tuple(1,2,), )
paddle.roll(Tensor([892, 16, 56, 56, 96],"float16"), shifts=tuple(4,3,3,), axis=tuple(1,2,3,), )
paddle.roll(x=Tensor([1431655766, 3],"float16"), shifts=1, axis=None, )
paddle.fft.fftshift(x=Tensor([2, 1073741825, 2],"float16"), )
paddle.fft.fftshift(x=Tensor([2, 4, 536870913],"float16"), )
paddle.fft.fftshift(x=Tensor([214748365, 5, 4],"float16"), )
paddle.fft.fftshift(x=Tensor([4, 268435457, 4],"float16"), )
paddle.fft.fftshift(x=Tensor([4, 5, 214748365],"float16"), )
paddle.fft.fftshift(x=Tensor([4, 5, 4, 53687092],"float16"), )
paddle.fft.fftshift(x=Tensor([4, 5, 53687092, 4],"float16"), )
paddle.fft.fftshift(x=Tensor([4, 67108865, 4, 4],"float16"), )
paddle.fft.fftshift(x=Tensor([4294967297],"float16"), )
paddle.fft.fftshift(x=Tensor([536870913, 4, 2],"float16"), )
paddle.fft.fftshift(x=Tensor([53687092, 5, 4, 4],"float16"), )
paddle.nn.functional.multi_label_soft_margin_loss(Tensor([5, 858993460],"float16"), Tensor([5, 858993460],"float16"), reduction="mean", weight=None, )
paddle.nn.functional.multi_label_soft_margin_loss(Tensor([5, 858993460],"float16"), Tensor([5, 858993460],"float16"), reduction="none", weight=None, )
paddle.nn.functional.multi_label_soft_margin_loss(Tensor([5, 858993460],"float16"), Tensor([5, 858993460],"float16"), reduction="sum", weight=None, )
paddle.nn.functional.multi_label_soft_margin_loss(Tensor([5, 858993460],"float16"), Tensor([5, 858993460],"float16"), weight=None, reduction="mean", name=None, )
paddle.nn.functional.multi_label_soft_margin_loss(Tensor([5, 858993460],"float16"), Tensor([5, 858993460],"float16"), weight=None, reduction="sum", name=None, )
paddle.vision.ops.roi_align(x=Tensor([1, 1901418, 40, 30],"float32"), boxes=Tensor([34, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.0625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 3802836, 20, 30],"float32"), boxes=Tensor([13, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 4225373, 20, 27],"float32"), boxes=Tensor([16, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 950709, 40, 60],"float32"), boxes=Tensor([17, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=14, spatial_scale=0.0625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 950709, 40, 60],"float32"), boxes=Tensor([18, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=14, spatial_scale=0.0625, sampling_ratio=0, aligned=True, )
paddle.nn.functional.rrelu(Tensor([1, 2, 3, 715827883],"float16"), 0.05, 0.25, training=False, )
paddle.nn.functional.rrelu(Tensor([1, 2, 3, 715827883],"float16"), 0.1, 0.33, training=False, )
paddle.nn.functional.rrelu(Tensor([1, 2, 536870913, 4],"float16"), 0.05, 0.25, training=False, )
paddle.nn.functional.rrelu(Tensor([1, 2, 536870913, 4],"float16"), 0.1, 0.33, training=False, )
paddle.nn.functional.rrelu(Tensor([1, 357913942, 3, 4],"float16"), 0.05, 0.25, training=False, )
paddle.nn.functional.rrelu(Tensor([1, 357913942, 3, 4],"float16"), 0.1, 0.33, training=False, )
paddle.nn.functional.rrelu(Tensor([178956971, 2, 3, 4],"float16"), 0.1, 0.33, training=False, )
paddle.nn.functional.rrelu(Tensor([2, 107374183, 4, 5],"float16"), 0.1, 0.3, training=False, )
paddle.nn.functional.rrelu(Tensor([2, 107374183, 4, 5],"float16"), 0.3, 0.300000009, training=True, )
paddle.nn.functional.rrelu(Tensor([2, 3, 143165577, 5],"float16"), 0.1, 0.3, training=False, )
paddle.nn.functional.rrelu(Tensor([2, 3, 4, 178956971],"float16"), 0.1, 0.3, training=False, )
paddle.nn.functional.rrelu(Tensor([2, 3, 4, 178956971],"float16"), 0.3, 0.300000009, training=True, )
paddle.nn.functional.rrelu(Tensor([2, 3, 4, 95070891],"float32"), 0.1, 0.3, training=False, )
paddle.nn.functional.rrelu(Tensor([2, 3, 4, 95070891],"float32"), 0.3, 0.300000009, training=True, )
paddle.nn.functional.rrelu(Tensor([2, 3, 76056713, 5],"float32"), 0.1, 0.3, training=False, )
paddle.nn.functional.rrelu(Tensor([2, 3, 76056713, 5],"float32"), 0.3, 0.300000009, training=True, )
paddle.nn.functional.rrelu(Tensor([2, 57042535, 4, 5],"float32"), 0.1, 0.3, training=False, )
paddle.nn.functional.rrelu(Tensor([2, 57042535, 4, 5],"float32"), 0.3, 0.300000009, training=True, )
paddle.nn.functional.rrelu(Tensor([38028357, 3, 4, 5],"float32"), 0.1, 0.3, training=False, )
paddle.nn.functional.rrelu(Tensor([38028357, 3, 4, 5],"float32"), 0.3, 0.300000009, training=True, )
paddle.nn.functional.rrelu(Tensor([71582789, 3, 4, 5],"float16"), 0.1, 0.3, training=False, )
paddle.nn.functional.rrelu(Tensor([71582789, 3, 4, 5],"float16"), 0.3, 0.300000009, training=True, )
paddle.fft.ifftshift(x=Tensor([2, 1073741825, 2],"float16"), )
paddle.fft.ifftshift(x=Tensor([2, 4, 536870913],"float16"), )
paddle.fft.ifftshift(x=Tensor([214748365, 5, 4],"float16"), )
paddle.fft.ifftshift(x=Tensor([4, 268435457, 4],"float16"), )
paddle.fft.ifftshift(x=Tensor([4, 5, 214748365],"float16"), )
paddle.fft.ifftshift(x=Tensor([4, 5, 4, 53687092],"float16"), )
paddle.fft.ifftshift(x=Tensor([4, 5, 53687092, 4],"float16"), )
paddle.fft.ifftshift(x=Tensor([4, 67108865, 4, 4],"float16"), )
paddle.fft.ifftshift(x=Tensor([4294967297],"float16"), )
paddle.fft.ifftshift(x=Tensor([536870913, 4, 2],"float16"), )
paddle.fft.ifftshift(x=Tensor([53687092, 5, 4, 4],"float16"), )
paddle.tril(Tensor([1, 1, 2281701379, 1],"float32"), )
paddle.tril(Tensor([1, 2281701379, 1, 1],"float32"), )
paddle.tril(Tensor([10, 228170138, 1],"float32"), 0, )
paddle.tril(Tensor([114085069, 20, 1],"float32"), 0, )
paddle.tril(Tensor([1321936, 1, 57, 57],"float16"), )
paddle.tril(Tensor([143165577, 30],"float16"), )
paddle.tril(Tensor([1472897, 1, 54, 54],"float16"), )
paddle.tril(Tensor([1529003, 1, 53, 53],"float16"), )
paddle.tril(Tensor([153391690, 28],"float16"), )
paddle.tril(Tensor([1651276, 1, 51, 51],"float16"), )
paddle.tril(Tensor([165191050, 26],"float16"), )
paddle.tril(Tensor([18512791, 232],"float16"), )
paddle.tril(Tensor([186737709, 23],"float16"), )
paddle.tril(Tensor([2, 1, 1140850690, 1],"bool"), )
paddle.tril(Tensor([2, 1, 1140850690, 1],"float32"), )
paddle.tril(Tensor([2, 1, 2147483649, 1],"float16"), )
paddle.tril(Tensor([2, 1, 37675152, 57],"float16"), )
paddle.tril(Tensor([2, 1, 39768216, 54],"float16"), )
paddle.tril(Tensor([2, 1, 40518560, 53],"float16"), )
paddle.tril(Tensor([2, 1, 42107523, 51],"float16"), )
paddle.tril(Tensor([2, 1, 45691142, 47],"float16"), )
paddle.tril(Tensor([2, 1, 53687092, 40],"float16"), )
paddle.tril(Tensor([2, 1, 55063684, 39],"float16"), )
paddle.tril(Tensor([2, 1, 56512728, 38],"float16"), )
paddle.tril(Tensor([2, 1140850690, 1, 1],"bool"), )
paddle.tril(Tensor([2, 1140850690, 1, 1],"float32"), )
paddle.tril(Tensor([2, 1277504, 41, 41],"float16"), )
paddle.tril(Tensor([2, 1342178, 40, 40],"float16"), )
paddle.tril(Tensor([2, 1411890, 39, 39],"float16"), )
paddle.tril(Tensor([2, 2147483649, 1, 1],"float16"), )
paddle.tril(Tensor([2, 660968, 57, 57],"float16"), )
paddle.tril(Tensor([2, 736449, 54, 54],"float16"), )
paddle.tril(Tensor([2, 764502, 53, 53],"float16"), )
paddle.tril(Tensor([2, 825638, 51, 51],"float16"), )
paddle.tril(Tensor([2, 972152, 47, 47],"float16"), )
paddle.tril(Tensor([204522253, 21],"float16"), )
paddle.tril(Tensor([2281701379, 1, 1, 1],"bool"), )
paddle.tril(Tensor([2281701379, 1, 1, 1],"float32"), )
paddle.tril(Tensor([2555008, 1, 41, 41],"float16"), )
paddle.tril(Tensor([2684355, 1, 40, 40],"float16"), )
paddle.tril(Tensor([2823779, 1, 39, 39],"float16"), )
paddle.tril(Tensor([2974355, 1, 38, 38],"float16"), )
paddle.tril(Tensor([38347923, 112],"float16"), )
paddle.tril(Tensor([38693400, 111],"float16"), )
paddle.tril(Tensor([390451573, 11],"float16"), )
paddle.tril(Tensor([39045158, 110],"float16"), )
paddle.tril(Tensor([4, 1, 570425345, 1],"float32"), )
paddle.tril(Tensor([4, 570425345, 1, 1],"float32"), )
paddle.tril(Tensor([40139882, 107],"float16"), )
paddle.tril(Tensor([4294967297, 1, 1, 1],"float16"), )
paddle.tril(Tensor([760567127, 3],"bool"), )
paddle.tril(x=Tensor([1073741825, 2, 2],"float16"), diagonal=-1, )
paddle.tril(x=Tensor([1073741825, 2, 2],"float16"), diagonal=0, )
paddle.tril(x=Tensor([1073741825, 2, 2],"float16"), diagonal=1, )
paddle.tril(x=Tensor([1073741825, 2, 2],"float16"), diagonal=5, )
paddle.tril(x=Tensor([3, 715827883, 2],"float16"), diagonal=-1, )
paddle.tril(x=Tensor([3, 715827883, 2],"float16"), diagonal=0, )
paddle.tril(x=Tensor([3, 715827883, 2],"float16"), diagonal=1, )
paddle.tril(x=Tensor([3, 715827883, 2],"float16"), diagonal=5, )
paddle.triu(Tensor([1, 1, 1, 4294967297],"float16"), diagonal=1, )
paddle.triu(Tensor([1, 1, 2048, 2097153],"float16"), )
paddle.triu(Tensor([1, 1025, 2048, 2048],"float16"), )
paddle.triu(Tensor([1, 286331154, 1, 15],"float16"), diagonal=1, )
paddle.triu(Tensor([1, 330382100, 1, 13],"float16"), diagonal=1, )
paddle.triu(Tensor([1, 357913942, 1, 12],"float16"), diagonal=1, )
paddle.triu(Tensor([1, 390451573, 1, 11],"float16"), diagonal=1, )
paddle.triu(Tensor([1, 429496730, 1, 10],"float16"), diagonal=1, )
paddle.triu(Tensor([1025, 1, 2048, 2048],"float16"), )
paddle.triu(Tensor([114085069, 20, 1],"float32"), 0, )
paddle.triu(Tensor([2, 1, 1, 2147483649],"float16"), )
paddle.triu(Tensor([2, 17602325, 1, 122],"float16"), )
paddle.triu(Tensor([2, 17747799, 1, 121],"float16"), )
paddle.triu(Tensor([2, 18046082, 1, 119],"float16"), )
paddle.triu(Tensor([2, 18199014, 1, 118],"float16"), )
paddle.triu(Tensor([2, 18354562, 1, 117],"float16"), )
paddle.triu(Tensor([2, 18512791, 1, 116],"float16"), )
paddle.triu(Tensor([2, 18673771, 1, 115],"float16"), )
paddle.triu(Tensor([2, 18837576, 1, 114],"float16"), )
paddle.triu(Tensor([2, 19004281, 1, 113],"float16"), )
paddle.triu(Tensor([2, 19173962, 1, 112],"float16"), )
paddle.triu(Tensor([2, 19346700, 1, 111],"float16"), )
paddle.triu(Tensor([2, 19701685, 1, 109],"float16"), )
paddle.triu(Tensor([2, 19884108, 1, 108],"float16"), )
paddle.triu(Tensor([2, 20069941, 1, 107],"float16"), )
paddle.triu(Tensor([2, 20259280, 1, 106],"float16"), )
paddle.triu(Tensor([2, 20452226, 1, 105],"float16"), )
paddle.triu(Tensor([2, 20648882, 1, 104],"float16"), )
paddle.triu(Tensor([2, 20849356, 1, 103],"float16"), )
paddle.triu(Tensor([2, 21053762, 1, 102],"float16"), )
paddle.triu(Tensor([2, 21474837, 1, 100],"float16"), )
paddle.triu(Tensor([286331154, 1, 1, 15],"float16"), diagonal=1, )
paddle.triu(Tensor([306783379, 1, 1, 14],"float16"), diagonal=1, )
paddle.triu(Tensor([330382100, 1, 1, 13],"float16"), diagonal=1, )
paddle.triu(Tensor([35204650, 1, 1, 122],"float16"), )
paddle.triu(Tensor([35495598, 1, 1, 121],"float16"), )
paddle.triu(Tensor([357913942, 1, 1, 12],"float16"), diagonal=1, )
paddle.triu(Tensor([35791395, 1, 1, 120],"float16"), )
paddle.triu(Tensor([36398028, 1, 1, 118],"float16"), )
paddle.triu(Tensor([36709123, 1, 1, 117],"float16"), )
paddle.triu(Tensor([37025581, 1, 1, 116],"float16"), )
paddle.triu(Tensor([37347542, 1, 1, 115],"float16"), )
paddle.triu(Tensor([37675152, 1, 1, 114],"float16"), )
paddle.triu(Tensor([38008561, 1, 1, 113],"float16"), )
paddle.triu(Tensor([38347923, 1, 1, 112],"float16"), )
paddle.triu(Tensor([38693400, 1, 1, 111],"float16"), )
paddle.triu(Tensor([39045158, 1, 1, 110],"float16"), )
paddle.triu(Tensor([39403370, 1, 1, 109],"float16"), )
paddle.triu(Tensor([39768216, 1, 1, 108],"float16"), )
paddle.triu(Tensor([40139882, 1, 1, 107],"float16"), )
paddle.triu(Tensor([40518560, 1, 1, 106],"float16"), )
paddle.triu(Tensor([40904451, 1, 1, 105],"float16"), )
paddle.triu(Tensor([41297763, 1, 1, 104],"float16"), )
paddle.triu(Tensor([41698712, 1, 1, 103],"float16"), )
paddle.triu(Tensor([42107523, 1, 1, 102],"float16"), )
paddle.triu(Tensor([42949673, 1, 1, 100],"float16"), )
paddle.triu(Tensor([429496730, 1, 1, 10],"float16"), diagonal=1, )
paddle.triu(x=Tensor([1073741825, 2, 2],"float16"), diagonal=-1, )
paddle.triu(x=Tensor([1073741825, 2, 2],"float16"), diagonal=-5, )
paddle.triu(x=Tensor([1073741825, 2, 2],"float16"), diagonal=0, )
paddle.triu(x=Tensor([1073741825, 2, 2],"float16"), diagonal=1, )
paddle.triu(x=Tensor([3, 2, 715827883],"float16"), diagonal=-1, )
paddle.triu(x=Tensor([3, 2, 715827883],"float16"), diagonal=-5, )
paddle.triu(x=Tensor([3, 2, 715827883],"float16"), diagonal=0, )
paddle.triu(x=Tensor([3, 2, 715827883],"float16"), diagonal=5, )
paddle.triu(x=Tensor([3, 715827883, 2],"float16"), diagonal=-1, )
paddle.triu(x=Tensor([3, 715827883, 2],"float16"), diagonal=-5, )
paddle.triu(x=Tensor([3, 715827883, 2],"float16"), diagonal=0, )
paddle.triu(x=Tensor([3, 715827883, 2],"float16"), diagonal=1, )
paddle.nn.functional.margin_cross_entropy(Tensor([1073741825, 2],"float16"), label=Tensor([1073741825],"int64"), margin1=1.0, margin2=0.5, margin3=0.0, scale=64.0, group=None, return_softmax=False, reduction="mean", )
paddle.nn.functional.margin_cross_entropy(Tensor([1073741825, 2],"float16"), label=Tensor([1073741825],"int64"), margin1=1.0, margin2=0.7, margin3=0.2, scale=32.0, group=None, return_softmax=False, reduction="mean", )
paddle.Tensor.cumsum(Tensor([4294967297],"float16"), -1, )
paddle.copysign(Tensor([10, 429496730],"int8"), Tensor([10, 429496730],"int8"), )
paddle.copysign(Tensor([107374183, 20, 2],"int8"), Tensor([107374183, 20, 2],"int8"), )
paddle.copysign(Tensor([12, 178956971, 2],"int8"), Tensor([12, 178956971, 2],"int8"), )
paddle.copysign(Tensor([12, 20, 17895698],"int8"), Tensor([12, 20, 17895698],"int8"), )
paddle.copysign(Tensor([2, 107374183, 4, 5],"int8"), Tensor([2, 107374183, 4, 5],"int8"), )
paddle.copysign(Tensor([2, 3, 143165577, 5],"int8"), Tensor([2, 3, 143165577, 5],"int8"), )
paddle.copysign(Tensor([2, 3, 4, 178956971],"int8"), Tensor([2, 3, 4, 178956971],"int8"), )
paddle.copysign(Tensor([214748365, 20],"int8"), Tensor([214748365, 20],"int8"), )
paddle.copysign(Tensor([71582789, 3, 4, 5],"int8"), Tensor([71582789, 3, 4, 5],"int8"), )
paddle.matmul(Tensor([2],"float32"), Tensor([2, 2147483648],"float32"), False, False, )
paddle.matmul(Tensor([2],"float16"), Tensor([2, 2147483648],"float16"), False, False, )
paddle.matmul(Tensor([3, 1431655765],"float32"), Tensor([3],"float32"), transpose_x=True, transpose_y=False, )
paddle.nn.functional.interpolate(Tensor([1, 23283, 280, 350],"float32"), size=tuple(300,375,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 54783, 280, 280],"float32"), size=tuple(256,200,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 70295, 235, 260],"float32"), size=tuple(224,224,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 77869, 182, 161],"float32"), size=tuple(224,224,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 81809, 250, 210],"float32"), size=tuple(224,224,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 83887, 256, 200],"float32"), size=tuple(180,160,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([11408507, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,1.7999999999999998,], mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([11408507, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,1.7999999999999998,], mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([11408507, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,0.6,], mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([11408507, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,0.6,], mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([11408507, 2, 10, 10],"float32"), size=list[13,13,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([11408507, 2, 10, 10],"float32"), size=list[13,13,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 11408507, 10, 10],"float32"), size=None, scale_factor=list[0.6,1.7999999999999998,], mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 11408507, 10, 10],"float32"), size=None, scale_factor=list[0.6,1.7999999999999998,], mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 11408507, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,0.6,], mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 11408507, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,0.6,], mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 11408507, 10, 10],"float32"), size=list[13,13,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 11408507, 10, 10],"float32"), size=list[13,13,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 57042535],"float32"), size=None, scale_factor=list[0.6,1.7999999999999998,], mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 57042535],"float32"), size=None, scale_factor=list[0.6,1.7999999999999998,], mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 57042535],"float32"), size=None, scale_factor=list[1.7999999999999998,0.6,], mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 57042535],"float32"), size=None, scale_factor=list[1.7999999999999998,0.6,], mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 57042535, 10],"float32"), size=None, scale_factor=list[0.6,1.7999999999999998,], mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 57042535, 10],"float32"), size=None, scale_factor=list[0.6,1.7999999999999998,], mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 57042535, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,0.6,], mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 57042535, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,0.6,], mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([21474837, 10, 10, 2],"float16"), size=list[26,2,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([21474837, 10, 10, 2],"float16"), size=list[26,2,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(257,455,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(258,457,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(259,459,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(260,461,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(261,462,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(262,464,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(263,466,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(264,468,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(265,469,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(266,471,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(267,473,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(268,475,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(269,477,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(270,478,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(271,480,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(272,482,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(273,484,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(274,485,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(275,487,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(276,489,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(277,491,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(278,493,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(279,494,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(280,496,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(281,498,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(282,500,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(283,501,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(284,503,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(285,505,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(286,507,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(287,508,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(288,510,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(289,512,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(290,514,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(291,516,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(292,517,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(293,519,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(294,521,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(295,523,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(296,524,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(297,526,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(298,528,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(299,530,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(300,532,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(301,533,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(302,535,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(303,537,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(304,539,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(305,540,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(306,542,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(307,544,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(308,546,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(309,547,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(310,549,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(311,551,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(312,553,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(313,555,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(314,556,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(315,558,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(316,560,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(317,562,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(318,563,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(319,565,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2454, 8, 256, 454],"float32"), size=tuple(320,567,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([25957, 3, 182, 161],"float32"), size=tuple(224,224,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(257,385,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(258,387,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(259,388,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(260,390,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(261,391,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(262,393,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(263,394,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(264,396,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(265,397,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(266,399,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(267,400,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(268,402,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(269,403,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(270,405,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(271,406,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(272,408,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(273,409,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(274,411,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(275,412,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(276,414,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(277,415,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(278,417,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(279,418,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(280,420,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(281,421,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(282,423,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(283,424,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(284,426,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(285,427,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(286,429,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(287,430,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(288,432,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(289,433,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(290,435,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(291,436,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(292,438,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(293,439,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(294,441,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(295,442,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(296,444,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(297,445,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(298,447,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(299,448,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(300,450,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(301,451,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(302,453,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(303,454,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(304,456,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(305,457,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(306,459,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(307,460,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(308,462,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(309,463,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(310,465,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(311,466,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(312,468,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(313,469,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(314,471,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(315,472,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(316,474,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(317,475,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(318,477,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(319,478,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2902, 8, 256, 384],"float32"), size=tuple(320,480,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(257,373,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(258,374,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(259,376,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(260,377,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(261,379,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(262,380,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(263,382,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(264,383,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(265,385,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(266,386,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(267,387,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(268,389,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(269,390,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(270,392,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(271,393,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(272,395,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(273,396,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(274,398,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(275,399,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(276,401,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(277,402,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(278,403,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(279,405,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(280,406,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(281,408,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(282,409,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(283,411,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(284,412,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(285,414,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(286,415,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(287,417,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(288,418,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(289,419,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(290,421,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(291,422,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(292,424,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(293,425,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(294,427,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(295,428,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(296,430,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(297,431,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(298,433,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(299,434,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(300,435,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(301,437,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(302,438,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(303,440,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(304,441,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(305,443,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(306,444,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(307,446,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(308,447,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(309,449,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(310,450,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(311,451,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(312,453,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(313,454,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(314,456,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(315,457,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(316,459,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(317,460,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(318,462,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2995, 8, 256, 372],"float32"), size=tuple(320,465,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 15474, 256, 192],"float32"), size=tuple(341,256,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 15474, 256, 192],"float32"), size=tuple(342,257,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 15474, 256, 192],"float32"), size=tuple(344,258,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 15474, 256, 192],"float32"), size=tuple(345,259,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 15474, 256, 192],"float32"), size=tuple(346,260,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 15474, 256, 192],"float32"), size=tuple(348,261,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 15474, 256, 192],"float32"), size=tuple(349,262,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 15474, 256, 192],"float32"), size=tuple(350,263,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(257,455,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(258,457,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(259,459,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(260,461,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(261,462,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(262,464,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(263,466,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(264,468,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(265,469,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(266,471,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(268,475,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(269,477,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(270,478,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(271,480,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(272,482,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(273,484,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(274,485,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(275,487,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(276,489,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(277,491,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(278,493,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(279,494,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(280,496,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(281,498,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(282,500,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(283,501,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(284,503,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(285,505,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(286,507,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(287,508,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(288,510,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(289,512,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(290,514,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(291,516,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(292,517,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(293,519,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(294,521,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(295,523,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(296,524,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(297,526,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(298,528,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(299,530,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(300,532,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(301,533,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(302,535,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(303,537,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(304,539,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(305,540,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(306,542,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(307,544,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(308,546,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(309,547,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(310,549,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(311,551,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(312,553,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(313,555,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(314,556,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(315,558,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(316,560,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(317,562,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(318,563,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(319,565,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 6544, 256, 454],"float32"), size=tuple(320,567,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(257,385,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(258,387,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(259,388,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(260,390,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(261,391,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(262,393,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(263,394,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(264,396,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(265,397,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(266,399,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(267,400,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(268,402,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(269,403,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(270,405,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(271,406,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(272,408,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(273,409,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(274,411,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(275,412,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(276,414,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(277,415,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(278,417,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(279,418,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(280,420,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(281,421,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(282,423,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(283,424,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(284,426,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(285,427,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(286,429,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(287,430,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(288,432,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(289,433,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(290,435,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(291,436,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(292,438,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(293,439,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(294,441,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(295,442,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(296,444,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(297,445,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(298,447,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(299,448,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(300,450,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(301,451,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(302,453,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(303,454,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(304,456,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(305,457,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(306,459,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(307,460,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(308,462,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(309,463,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(310,465,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(311,466,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(312,468,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(313,469,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(314,471,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(315,472,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(317,475,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(318,477,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(319,478,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7737, 256, 384],"float32"), size=tuple(320,480,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(257,373,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(258,374,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(259,376,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(260,377,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(261,379,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(262,380,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(263,382,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(264,383,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(265,385,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(266,386,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(267,387,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(268,389,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(269,390,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(270,392,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(271,393,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(272,395,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(273,396,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(274,398,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(275,399,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(276,401,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(277,402,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(278,403,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(279,405,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(280,406,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(282,409,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(283,411,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(284,412,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(285,414,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(286,415,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(287,417,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(288,418,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(289,419,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(290,421,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(291,422,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(292,424,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(293,425,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(294,427,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(295,428,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(296,430,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(297,431,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(299,434,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(300,435,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(301,437,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(302,438,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(303,440,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(304,441,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(305,443,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(306,444,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(307,446,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(308,447,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(309,449,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(310,450,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(311,451,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(312,453,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(313,454,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(314,456,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(315,457,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(316,459,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(317,460,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(318,462,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(319,463,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 7987, 256, 372],"float32"), size=tuple(320,465,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(257,341,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(258,342,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(259,343,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(260,345,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(261,346,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(262,347,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(263,349,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(264,350,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(265,351,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(266,353,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(268,355,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(269,357,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(270,358,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(271,359,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(272,361,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(273,362,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(274,363,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(275,365,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(277,367,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(278,369,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(279,370,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(280,371,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(281,373,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(282,374,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(283,375,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(284,377,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(285,378,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(286,379,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(287,381,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(288,382,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(289,383,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(290,385,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(291,386,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(292,387,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(294,390,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(295,391,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(296,393,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(297,394,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(298,395,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(299,397,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(300,398,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(301,399,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(302,401,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(303,402,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(304,403,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(305,405,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(306,406,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(307,407,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(308,409,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(309,410,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(310,411,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(311,413,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(312,414,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(313,415,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(314,417,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(315,418,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(316,419,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(317,421,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(318,422,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(319,423,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 8739, 256, 340],"float32"), size=tuple(320,425,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(257,315,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(258,316,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(259,317,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(260,318,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(262,321,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(263,322,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(264,323,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(265,325,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(266,326,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(267,327,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(268,328,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(269,329,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(270,331,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(271,332,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(272,333,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(273,334,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(274,336,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(275,337,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(276,338,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(277,339,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(278,340,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(279,342,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(280,343,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(281,344,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(282,345,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(283,347,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(284,348,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(285,349,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(286,350,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(287,352,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(288,353,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(289,354,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(290,355,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(291,356,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(292,358,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(293,359,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(294,360,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(295,361,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(296,363,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(297,364,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(298,365,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(299,366,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(300,367,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(301,369,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(302,370,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(303,371,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(304,372,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(305,374,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(306,375,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(307,376,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(308,377,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(309,379,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(310,380,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(311,381,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(312,382,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(313,383,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(314,385,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(315,386,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(316,387,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(317,388,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(318,390,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(319,391,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3, 9462, 256, 314],"float32"), size=tuple(320,392,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(257,341,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(258,342,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(259,343,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(260,345,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(261,346,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(262,347,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(263,349,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(264,350,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(265,351,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(266,353,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(267,354,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(268,355,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(269,357,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(270,358,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(271,359,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(272,361,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(273,362,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(274,363,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(275,365,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(276,366,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(277,367,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(278,369,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(279,370,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(280,371,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(281,373,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(282,374,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(283,375,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(284,377,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(285,378,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(286,379,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(287,381,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(288,382,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(289,383,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(290,385,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(291,386,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(292,387,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(293,389,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(294,390,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(295,391,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(297,394,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(298,395,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(299,397,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(300,398,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(301,399,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(302,401,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(303,402,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(304,403,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(305,405,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(306,406,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(307,407,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(308,409,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(309,410,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(310,411,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(311,413,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(312,414,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(313,415,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(314,417,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(315,418,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(316,419,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(317,421,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(318,422,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(319,423,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3277, 8, 256, 340],"float32"), size=tuple(320,425,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(257,315,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(258,316,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(259,317,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(260,318,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(261,320,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(263,322,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(264,323,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(265,325,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(266,326,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(267,327,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(268,328,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(269,329,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(270,331,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(271,332,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(272,333,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(273,334,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(274,336,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(275,337,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(276,338,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(277,339,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(278,340,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(279,342,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(280,343,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(281,344,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(282,345,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(283,347,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(284,348,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(285,349,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(286,350,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(287,352,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(288,353,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(289,354,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(290,355,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(291,356,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(292,358,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(293,359,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(294,360,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(295,361,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(296,363,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(297,364,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(298,365,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(299,366,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(300,367,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(301,369,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(302,370,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(303,371,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(304,372,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(305,374,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(306,375,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(307,376,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(308,377,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(309,379,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(310,380,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(311,381,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(312,382,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(313,383,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(314,385,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(315,386,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(316,387,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(317,388,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(318,390,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(319,391,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([3549, 8, 256, 314],"float32"), size=tuple(320,392,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([5803, 8, 256, 192],"float32"), size=tuple(341,256,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([5803, 8, 256, 192],"float32"), size=tuple(342,257,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([5803, 8, 256, 192],"float32"), size=tuple(344,258,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([5803, 8, 256, 192],"float32"), size=tuple(345,259,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([5803, 8, 256, 192],"float32"), size=tuple(346,260,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([5803, 8, 256, 192],"float32"), size=tuple(348,261,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([5803, 8, 256, 192],"float32"), size=tuple(349,262,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([5803, 8, 256, 192],"float32"), size=tuple(350,263,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([7761, 3, 280, 350],"float32"), size=tuple(300,375,), mode="bilinear", data_format="NCHW", )
paddle.rsqrt(Tensor([10000, 143166, 3],"float16"), )
paddle.rsqrt(Tensor([10000, 2, 214749],"float16"), )
paddle.rsqrt(Tensor([1431655766, 3],"float16"), )
paddle.rsqrt(Tensor([16, 268435457],"float16"), )
paddle.rsqrt(Tensor([2, 2147483649],"float16"), )
paddle.rsqrt(Tensor([32, 134217729],"float16"), )
paddle.rsqrt(Tensor([4294967297, 1],"float16"), )
paddle.rsqrt(Tensor([715827883, 2, 3],"float16"), )
paddle.rsqrt(x=Tensor([2, 1073741825, 2],"float16"), )
paddle.rsqrt(x=Tensor([2, 3, 715827883],"float16"), )
paddle.rsqrt(x=Tensor([2, 715827883, 3],"float16"), )
paddle.rsqrt(x=Tensor([477218589, 3, 3],"float16"), )
paddle.rsqrt(x=Tensor([715827883, 3, 2],"float16"), )
paddle.linalg.matrix_rank(Tensor([3, 47721859, 5, 6],"float32"), None, False, )
paddle.linalg.matrix_rank(x=Tensor([2, 67108865, 4, 4],"float64"), tol=None, hermitian=True, )
paddle.linalg.matrix_rank(x=Tensor([4, 1073741824],"float32"), tol=None, hermitian=False, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[0.7999999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[0.7999999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[0.7999999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[0.7999999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 107374183, 2],"float16"), size=None, scale_factor=list[0.6,0.6,], mode="bicubic", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 107374183, 2],"float16"), size=None, scale_factor=list[0.6,0.6,], mode="bicubic", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 107374183, 2],"float16"), size=None, scale_factor=list[0.6,0.6,], mode="bilinear", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 107374183, 2],"float16"), size=None, scale_factor=list[0.6,0.6,], mode="bilinear", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 107374183, 10, 2],"float16"), size=None, scale_factor=list[0.6,0.6,], mode="bicubic", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 107374183, 10, 2],"float16"), size=None, scale_factor=list[0.6,0.6,], mode="bicubic", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 107374183, 10, 2],"float16"), size=None, scale_factor=list[0.6,0.6,], mode="bilinear", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 107374183, 10, 2],"float16"), size=None, scale_factor=list[0.6,0.6,], mode="bilinear", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 57042535],"float32"), size=None, scale_factor=list[0.6,0.6,], mode="bicubic", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 57042535],"float32"), size=None, scale_factor=list[0.6,0.6,], mode="bicubic", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 57042535],"float32"), size=None, scale_factor=list[0.6,0.6,], mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 57042535],"float32"), size=None, scale_factor=list[0.6,0.6,], mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 57042535],"float32"), size=None, scale_factor=list[0.6,1.7999999999999998,], mode="bicubic", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 57042535],"float32"), size=None, scale_factor=list[0.6,1.7999999999999998,], mode="bicubic", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 57042535],"float32"), size=None, scale_factor=list[1.7999999999999998,0.6,], mode="bicubic", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 57042535],"float32"), size=None, scale_factor=list[1.7999999999999998,0.6,], mode="bicubic", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 57042535, 10],"float32"), size=None, scale_factor=list[0.6,0.6,], mode="bicubic", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 57042535, 10],"float32"), size=None, scale_factor=list[0.6,0.6,], mode="bicubic", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 57042535, 10],"float32"), size=None, scale_factor=list[0.6,0.6,], mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 57042535, 10],"float32"), size=None, scale_factor=list[0.6,0.6,], mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 57042535, 10],"float32"), size=None, scale_factor=list[0.6,1.7999999999999998,], mode="bicubic", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 57042535, 10],"float32"), size=None, scale_factor=list[0.6,1.7999999999999998,], mode="bicubic", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 57042535, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,0.6,], mode="bicubic", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 57042535, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,0.6,], mode="bicubic", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 536870913, 4],"float16"), size=None, scale_factor=list[1.0000000000000002,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 536870913, 4],"float16"), size=None, scale_factor=list[1.0000000000000002,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 536870913, 4],"float16"), size=None, scale_factor=list[1.0000000000000002,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 536870913, 4],"float16"), size=None, scale_factor=list[1.0000000000000002,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 107374183, 2],"float16"), size=None, scale_factor=list[0.6,0.6,], mode="nearest", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 10, 107374183, 2],"float16"), size=None, scale_factor=list[0.6,0.6,], mode="nearest", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 57042535],"float32"), size=None, scale_factor=list[0.6,0.6,], mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 57042535],"float32"), size=None, scale_factor=list[0.6,0.6,], mode="nearest", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 57042535],"float32"), size=None, scale_factor=list[0.6,1.7999999999999998,], mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 57042535],"float32"), size=None, scale_factor=list[0.6,1.7999999999999998,], mode="nearest", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 57042535],"float32"), size=None, scale_factor=list[1.7999999999999998,0.6,], mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 2, 10, 57042535],"float32"), size=None, scale_factor=list[1.7999999999999998,0.6,], mode="nearest", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.normalize(x=Tensor([20452226, 5, 6, 7],"float16"), p=4, axis=3, )
paddle.nn.functional.normalize(x=Tensor([4, 5, 30678338, 7],"float16"), p=4, )
paddle.nn.functional.normalize(x=Tensor([20452226, 5, 6, 7],"float16"), p=4, )
paddle.nn.functional.normalize(x=Tensor([2147483649, 2],"float16"), p=1.2, )
paddle.nn.functional.normalize(x=Tensor([4, 25565282, 6, 7],"float16"), p=4, axis=3, )
paddle.nn.functional.normalize(x=Tensor([4, 5, 30678338, 7],"float16"), p=4, axis=3, )
paddle.nn.functional.normalize(x=Tensor([4, 5, 6, 35791395],"float16"), p=4, )
paddle.dist(x=Tensor([10],"float16"), y=Tensor([429496730, 10],"float16"), p=4, )
paddle.argsort(Tensor([1, 1073741823],"float16"), descending=True, stable=True)
paddle.nn.functional.pairwise_distance(Tensor([100, 22817014],"float32"), Tensor([100, 22817014],"float32"), -math.inf, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 22817014],"float32"), Tensor([100, 22817014],"float32"), -math.inf, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 22817014],"float32"), Tensor([100, 22817014],"float32"), math.inf, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 22817014],"float32"), Tensor([100, 22817014],"float32"), math.inf, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 42949673],"float16"), Tensor([100, 42949673],"float16"), -math.inf, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 42949673],"float16"), Tensor([100, 42949673],"float16"), -math.inf, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 42949673],"float16"), Tensor([100, 42949673],"float16"), math.inf, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 42949673],"float16"), Tensor([100, 42949673],"float16"), math.inf, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([2, 1140850690],"float32"), Tensor([2, 1140850690],"float32"), -math.inf, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([2, 1140850690],"float32"), Tensor([2, 1140850690],"float32"), math.inf, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([2, 2147483649],"float16"), Tensor([2, 2147483649],"float16"), -math.inf, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([2, 2147483649],"float16"), Tensor([2, 2147483649],"float16"), math.inf, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), -math.inf, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), -math.inf, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), math.inf, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), math.inf, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([22817014, 100],"float32"), Tensor([22817014, 100],"float32"), -math.inf, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([22817014, 100],"float32"), Tensor([22817014, 100],"float32"), -math.inf, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([22817014, 100],"float32"), Tensor([22817014, 100],"float32"), math.inf, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([22817014, 100],"float32"), Tensor([22817014, 100],"float32"), math.inf, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([4294967297],"float16"), Tensor([4294967297],"float16"), -math.inf, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([4294967297],"float16"), Tensor([4294967297],"float16"), -math.inf, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([4294967297],"float16"), Tensor([4294967297],"float16"), math.inf, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([4294967297],"float16"), Tensor([4294967297],"float16"), math.inf, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([42949673, 100],"float16"), Tensor([42949673, 100],"float16"), -math.inf, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([42949673, 100],"float16"), Tensor([42949673, 100],"float16"), -math.inf, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([42949673, 100],"float16"), Tensor([42949673, 100],"float16"), math.inf, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([42949673, 100],"float16"), Tensor([42949673, 100],"float16"), math.inf, 1e-06, True, None, )
paddle.std(Tensor([1, 107374183, 4, 10],"float16"), 2, True, False, )
paddle.std(Tensor([1, 3, 4, 357913942],"float16"), 2, True, False, )
paddle.std(Tensor([35791395, 3, 4, 10],"float16"), 2, True, False, )
paddle.std(x=Tensor([3, 3, 477218589],"float16"), axis=0, )
paddle.std(x=Tensor([3, 3, 477218589],"float16"), axis=0, unbiased=False, )
paddle.std(x=Tensor([3, 477218589, 3],"float16"), axis=0, )
paddle.std(x=Tensor([3, 477218589, 3],"float16"), axis=0, unbiased=False, )
